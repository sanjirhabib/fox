#include "html.h"
void* sqlite_func(char* name, char* db){
	map* func=user_funcs()[name]
	if !func => "Function $name not found in sqlite_func".fox_error()
	db.lite_conn().sqlite3_create_function(name, -1, SQLITE_UTF8, func, sqlite_func_handler, NULL, NULL)
	return name
}
static void sqlite_func_handler(sqlite3_context *context, int argc, sqlite3_value **argv){
	map* func=context.sqlite3_user_data()
	if !func.name => "sqlite_func_handler() corrupt function handler".fox_error()
	params=[]
	for i=0; i<argc; i++
		if func.params[i].type===:int
			params[]=argv[i].sqlite3_value_int().int_var()
		else if func.params[i].type==="char*"
			params[]=(void*)sqlite3_value_text(argv[i])
		else if func.params[i].type===:double
			params[]=argv[i].sqlite3_value_double().double_var()
		else
			"Function parameter type $(func.params[i].type) $(func.name) not supported in call inside sqlite function()".fox_error()
	void* ret=params.user_invoke(func.name)
	if func.type===:double
		sqlite3_result_double(context, ret.to_double())
	else if func.type==="char*"
		sqlite3_result_text(context, ret, ret.str_len(), SQLITE_TRANSIENT)
	else if func.type===:int
		sqlite3_result_int(context, ret.to_int())
	else
		sqlite3_result_null(context)
}
