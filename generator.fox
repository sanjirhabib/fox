#line 2 "/web/fox/generator.fox"
#include <fox.h>

int cgi(char* infile="index.fox", char* profile=:cgi, char* outfile="index.cgi",char* opts=NULL,int keepfiles=1){
	return infile.cc(profile, outfile, opts, keepfiles)
}
char* fox_meta(char* infile, char* name,char* outfile=''){
	return ---
	#include "$name.h"
	$(infile.file_funcs().funcs_meta(infile.c_macros(), infile.c_structs(), name))
	int exec_cmdline(map* args){
		if !args[1].is_code() => return 0
		args.cmdline_params($(name)_reflect().funcs).$(name)_invoke(args[1]).ret_print()
		return 1
	}

	---.x_c().write_file(outfile)
}
int cc(char* infile, char* profile="debug", char* outfile=NULL, char* opts=NULL, int keepfiles=0){
	infile=infile.file_rename(,".fox")
	if !outfile => outfile=infile
	in=infile..".fox"
	metafile=infile.."_meta.c"
	in.fox_c(infile..".c")
	(in.fox_h()..infile.meta_h()).write_file(infile..".h")
	in.fox_meta(infile,metafile)
	//-I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib 
	cflags="-m64 -std=gnu99 -Wno-unused-command-line-argument -g"
	xlibs="-lmarkdown -lcurl -lsqlite3"
	// -fdata-sections -ffunction-sections -Wl,-dead_strip -Wl,-emain
	switches={
		debug: "-g -O0 -lfox $cflags $xlibs -lfoxmain"
		speed: "-O3 -lfox $cflags $xlibs -lfoxmain"
		size: "-Os -lfox $cflags -lfoxmain"
		static: "-lfoxstatic -lfoxcmdstatic $cflags -fdata-sections -ffunction-sections -Wl,-dead_strip -lfoxmain"
		cgi: "-Os -lfoxstatic -lfoxcgistatic $cflags $xlibs -lfoxmaincgi"
		scgi: "-Os -lfoxstatic -lfoxcgistatic $cflags $xlibs -lfoxmaincgi -fdata-sections -ffunction-sections -Wl,-dead_strip "
	}
	profile = switches[profile] or switches[:debug]
	ret="gcc $infile.c $metafile -o $outfile -L/usr/local/lib $profile $opts -std=gnu99 -Wno-logical-op-parentheses -lm 2>&1"
		.px()
		.exec()
	if !keepfiles
		(infile..".c").remove()	
		(infile..".h").remove()	
	return ret
}
char* write_configm4(char* name=:fox, char* outfile=NULL){
	NAME=name.str_dup().str_upper()
	return ---
	PHP_ARG_WITH($name, for $name support,
	Make sure that the comment is aligned:
	[  --with-$name             Include $name support])
	if test "$$PHP_$NAME" != "no"; then

	$(NAME)_DIR="/usr/local"

	if test -z "$("$"..NAME)_DIR"; then
	  AC_MSG_RESULT([not found])
	  AC_MSG_ERROR([Please reinstall the $name distribution])
	fi

	# --with-$name -> add include path
	PHP_ADD_INCLUDE($("$"..NAME)_DIR/include)

	# --with-$name -> check for lib and symbol presence
	LIBNAME=fox # you may want to change this
	LIBSYMBOL=init_gc # you most likely want to change this 

	PHP_CHECK_LIBRARY($$LIBNAME,$$LIBSYMBOL,
	[
	  PHP_ADD_LIBRARY_WITH_PATH($$LIBNAME, $("$"..NAME)_DIR/lib, $(NAME)_SHARED_LIBADD)
	  AC_DEFINE(HAVE_$(NAME)LIB,1,[ ])
	],[
	  AC_MSG_ERROR([wrong fox lib version or lib not found])
	],[
	  -L$("$"..NAME)_DIR/$$PHP_LIBDIR -lm
	])

	PHP_SUBST($(NAME)_SHARED_LIBADD)

	  PHP_NEW_EXTENSION($name, $name.c $(name)php.c, $$ext_shared,, -DZEND_ENABLE_STATIC_TSRMLS_CACHE=1)
	fi

	---.write_file(outfile)
}
void write_source(){
	source_funcs()
	"fox.h".file_rename(:include).write_foxh()
	source_files().each infile
		if infile.str_end(".h") => continue
		infile.fox_c(infile.file_rename(:src,".fox")..".c")
		//infile.fox_h(infile.file_rename(:include,".fox")..".h")
	("#include <fox.h>\n\n"..source_funcs().funcs_meta(source_macros(), source_structs())).write_file("meta.c".file_rename(:src))
	mem_usage().px()
}
char* write_foxh(char* outfile="fox.h"){
	return (foxh()..source_funcs().funcs_cdecl(0)).write_file(outfile)
}
char* fox_phpc(char* infile=NULL,char* outfile=NULL){
	fns=infile ? infile.file_funcs() : source_funcs()
	temp=infile.str_split("/")
	temp=temp[temp.map_len()-1].str_split(".")
	name=temp[0]
	ret=---
	#ifdef HAVE_CONFIG_H
	#include "config.h"
	#endif
	#include <php.h>
	#include <fox.h>
	#include "$(name).h"

	void* zval_var(zval* z);
	zval var_zval(void* v);
	zval map_zval(map* mp);
	map* zval_map(zval* z);
	void* call_php(map* params,char* func);

	---
	reg=''
	fns.each v,,i
		if !v.type.is_word("void* map* int char*") => continue
		if v.name.is_word("main") => continue
		decls=""
		format=""
		post=""
		pointers=""
		call=""
		hasdefault=0
		skip=0
		foxname=v.name
		if !infile && !foxname.str_start(:fox_) => foxname="fox_$(v.name)"
		v.params.each ,name,i2
			if name==="..." => skip=1; break
			map* v2=v.params[name]
			if !hasdefault && v2.default
				hasdefault=1
				format=format.xcat("|")
			if v2.type==="char*"
				decls=decls.xcat("\tchar* ",:in_,name,"=NULL;\n")
				decls=decls.xcat("\tsize_t ",:in_,name,"_len=-1;\n")
				pointers=pointers.xcat(", &in_",name,", &in_",name,:_len)
				format=format.xcat(:s)
				if v2.default
					post=post.xcat("\tif(in_$(name)_len==-1) in_$(name)=$(v2.default.x_c())\n")
					post=post.xcat("\telse in_$(name)=str_dup(in_$(name));\n")
//				else => post=post.xcat("\tin_$(name)=str_dup(in_$(name));\n")
			else if v2.type===:int
				decls=decls.xcat("\tlong ",:in_,name,"=(1ll<<62);\n")
				pointers=pointers.xcat(", &in_",name)
				format=format.xcat(:l)
				if v2.default => post=post.xcat("\tif(in_$(name)==(1ll<<62)) in_$(name)=$(v2.default.x_c())\n")
			else if v2.type==="void*"
				decls=decls.xcat("\tzval* ",:in_,name,"_zval=NULL;\n")
				pointers=pointers.xcat(", &in_",name,:_zval)
				format=format.xcat(:z)
				if v2.default
					post=post.xcat("\tvoid* ",:in_,name,"=NULL;\n")
					post=post.xcat("\tif(!in_$(name)_zval) in_$(name)=$(v2.default.x_c())\n")
					post=post.xcat("\telse in_",name,"=zval_var(in_$(name)_zval);\n")
				else => post=post.xcat("\tvoid* ",:in_,name,"=zval_var(in_$(name)_zval);\n")
			else if v2.type==="map*"
				decls=decls.xcat("\tzval* ",:in_,name,"_zval=NULL;\n")
				pointers=pointers.xcat(", &in_",name,:_zval)
				format=format.xcat(:z)
				if v2.default
					post=post.xcat("\tvoid* ",:in_,name,"=NULL;\n")
					post=post.xcat("\tif(!in_$(name)_zval) in_$(name)=$(v2.default.x_c())\n")
					post=post.xcat("\telse in_",name,"=zval_var(in_$(name)_zval);\n")
				else => post=post.xcat("\tmap* ",:in_,name,"=zval_var(in_$(name)_zval);\n")
			else => skip=1; break
			call=call.xcat("in_$(name),")

		if skip => continue
		reg=reg.xcat("\tPHP_FE($foxname, NULL)\n")
		call=call.sub_str(0,-1)
		ret.="\nPHP_FUNCTION($foxname){\n"
		if v.params.map_len()
			ret=ret..---
			$decls	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,"$format"$pointers)==FAILURE){ RETURN_NULL(); }
			$post

			---
		if v.type===:void
			ret.="\t$(v.name)($call);\n"
			ret.="\tRETURN_NULL();\n"
		else
			ret.="\t$(v.type) ret=$(v.name)($call);\n"
			if v.type===:int => ret.="\tRETURN_LONG(ret);\n"
			else if v.type==="char*"
				ret.="\tif(!ret) RETURN_NULL();\n"
				ret.="\tRETVAL_STRING(ret);\n"
			else if v.type==="map*"
				ret.=---
					zval zret;
					if(!ret){
						array_init(&zret);
					}
					else zret=var_zval(ret);
					RETURN_ZVAL(&zret,0,0);

				---
			else if v.type==="void*"
				ret.="\tzval zret=var_zval(ret);\n"
				ret.="\tRETURN_ZVAL(&zret,0,0);\n"
		ret.="}\n"

	ret.=---

	static zend_function_entry $(name)_functions[] = {
	$(reg)	{NULL, NULL, NULL}
	};

	---;
	ret.=---
	PHP_RINIT_FUNCTION($(name)){
		gc_start();
		return SUCCESS;
	}
	PHP_RSHUTDOWN_FUNCTION($(name)){
		gc_end();	
		return SUCCESS;
	}

	zend_module_entry $(name)_module_entry = {
	#if ZEND_MODULE_API_NO >= 20010901
		STANDARD_MODULE_HEADER,
	#endif
		"$(name)",
		$(name)_functions,
		NULL,
		NULL,
		PHP_RINIT($(name)),
		PHP_RSHUTDOWN($(name)),
		NULL,
	#if ZEND_MODULE_API_NO >= 20010901
		"0.70", //Version Number
	#endif
		STANDARD_MODULE_PROPERTIES
	};

	#ifdef COMPILE_DL_$(name.str_dup().str_upper())
	ZEND_GET_MODULE($(name))
	#endif

	void xexit(int val){
		zend_error(E_ERROR,"%s","Exiting Abnormally");
	}
	void* fox_error(char* msg,int dump){
		if(dump) php_printf("<pre>%s</pre>",stack_str());
		zend_error(E_ERROR,"%s",msg);
		return msg;
	}
	void* px(void* str,int newline){
		php_printf("%s",str);
		return str;
	}
	void* zval_var(zval* z){
		if(!z) return NULL;
		int type=Z_TYPE_P(z);
		if(type==IS_NULL) return NULL;
		else if(type==IS_ARRAY) return zval_map(z);
		else if(type==IS_STRING) return str_dup(Z_STRVAL_P(z));
		else if(type==IS_TRUE||type==IS_FALSE||type==IS_LONG) return int_var(Z_LVAL_P(z));
		else if(type==IS_DOUBLE) return int_var((int)Z_DVAL_P(z));
		else if(type==IS_RESOURCE) return "<RES>";
		else if(type==IS_OBJECT) return "<OBJ>";
		else if(type==IS_REFERENCE) return "<REF>";
		else if(type==IS_UNDEF) return NULL;
		else if(type==IS_CONSTANT) return "<CONST>";
		else if(type==IS_CONSTANT_AST) return "<AST>";
		else if(type==IS_INDIRECT) return "<INDIRECT>";
		else if(type==IS_PTR) return "<PTR>";
		printf("utype=%d\n",type);
		return "<UNKNOWN>";
	}
	zval var_zval(void* v){
		zval ret={0};
		if(!v) { ZVAL_NULL(&ret); }
		else if(is_map(v)) return map_zval(v);
		else if(is_str(v) && v){ ZVAL_STRING(&ret,v); }
		else if(is_i(v)){ ZVAL_LONG(&ret,is_int(v)); }
		else if(is_f(v)){ ZVAL_DOUBLE(&ret,is_double(v)); }
		return ret;
	}
	zval map_zval(map* mp){
		zval ret={0};
		array_init(&ret);
		for(int i=next(mp,-1,NULL,NULL);has_id(mp,i);i++){
			char* k=map_key(mp,i);
			zval z=var_zval(map_id(mp,i));
			if(is_i(k)) add_index_zval(&ret,is_int(k)-1,&z);
			else add_assoc_zval(&ret,k,&z);
		}
		return ret;
	}
	map* zval_map(zval* z){
		if(!z) return NULL;
		map* mp=new_map();
		zval *arr, *data;
		HashTable *arr_hash=Z_ARRVAL_P(z);
		HashPosition pointer;
		for(zend_hash_internal_pointer_reset_ex(arr_hash, &pointer); (data=zend_hash_get_current_data_ex(arr_hash, &pointer)); zend_hash_move_forward_ex(arr_hash, &pointer)){
			zend_string *zkey;
			zend_ulong index;
			char* key;
			if(zend_hash_get_current_key_ex(arr_hash,&zkey,&index,&pointer)==HASH_KEY_IS_LONG) key=int_var(index+1);
			else key=ZSTR_VAL(zkey);
			map_add(mp,key,zval_var(data));
		}
		return mp;
	}
	void* php_global(char* name){
		zend_string* key=zend_string_init(name,strlen(name),0);
		zval* zret=zend_hash_find(&EG(symbol_table), key);
		zend_string_release(key);
		if(!zret) return NULL;
		if(Z_TYPE_P(zret)==IS_INDIRECT) zret = Z_INDIRECT_P(zret);
		if(Z_TYPE_P(zret)==IS_REFERENCE) ZVAL_DEREF(zret);
		return zval_var(zret);
	}
	void* call_php(map* params,char* func){
		zval z={0};
		zval php_func={0};
		ZVAL_STRING(&php_func,func);
		int no=params && params->len ? params->len : 0;
		zval* php_args=NULL;
		void* ret={0};
		if(no){
			php_args=emalloc(sizeof(zval)*no);
			for(int i=0;i<no;i++) php_args[i]=var_zval(map_id(params,i));
		}
		if(call_user_function(CG(function_table),NULL,&php_func,&z,no,php_args)!=SUCCESS){
			zend_error(E_ERROR,"Call to %s failed\n",func);
		}
		else ret=zval_var(&z);
		if(no){
			for(int i=0;i<no;i++) zval_dtor(&php_args[i]);
			efree(php_args);
		}
		zval_dtor(&z);
		return ret;
	}

	---;
	return ret.write_file(outfile)
}
char* write_phpconfig(){
	return '---
	PHP_ARG_ENABLE(foxphp, whether to enable FoxPHP library support,
	[ --enable-foxphp   Enable FoxPHP library support])
	if test "$PHP_FOXPHP" = "yes"; then
	  PHP_SUBST(CFLAGS)
	  AC_DEFINE(HAVE_FOXPHP, 1, [Whether you have FoxPHP Library])
	  PHP_NEW_EXTENSION(foxphp, foxphp.c fox.c sql.c extern.c callfunc.c, $ext_shared,,-Wno-logical-op-parentheses -DPHP_MOD)
	fi

	---'.write_file("config.m4")
}
char* meta_h(char* prefix=''){
	prefix&&=prefix.."_"
	return ---
	char* $(prefix)version();
	void* $(prefix)invoke(map* v,char* name);
	map* $(prefix)reflect();
	int exec_cmdline(map* args);

	---;
}
char* funcs_meta(map* funcs, map* macros, map* structs, char* prefix=''){
	prefix&&=prefix.."_"
	return ---
	/* This is a generated file. To change it, edit function funcs_meta() in fox.c */
	char* $(prefix)version(){
		return "Fox: build: $(increase_version()), date: $(time_str()) [%s old]".mstr("$(time_str())".time_ago());
	}
	void* $(prefix)invoke(map* v,char* name){
		unsigned long long idn=str_hash((unsigned char*)name)
		switch(idn){
	//$(funcs.callfunc_c())
		}
		return "invoke(): Function $$name not defined".fox_error()
	}
	map* $(prefix)reflect(){
		return {
			funcs: $(funcs.map_ccode()),
			macros: $(macros.map_ccode()),
			structs: $(structs.map_ccode())
		}
	}

	---.x_c()
}
char* gen_htaccess(char* outfile=NULL){
	return ---
	RewriteEngine On
	#RewriteCond %{HTTPS} off
	#RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
	RewriteCond %{REQUEST_FILENAME} !-f
	RewriteCond %{REQUEST_FILENAME} !-d
	RewriteRule ^(.+)$ index.cgi [L,QSA]
	<FilesMatch "\.(db|txt|sql)$">
	Order allow,deny
	Deny from all
	</FilesMatch>

	---.write_file(outfile)
}
char* gen_cgi_makefile(char* name, char* outfile=NULL){
	return ---
	all:
		fox cgi $name.fox
	fox:
		cd /web/fox && make install && cd -
	c:
		fox cgi salat.fox --keepfiles=1
	
	---.write_file(outfile)
}
char* gen_fox_cgi(char* name,char* outfile=NULL){
	return ---
	#line 2 "$name.fox"
	#include "$name.h"

	int run(map* req){
		_globals.dbs.$name="$name.db"
		path=_globals.paths

		if "/".get().end
			{{
				title $(name.str_title())'s Application
			}}.show_page()

		not_found()
		return 0
	}

	---.write_file(outfile)
}
int cgi_init(char* name){
	if !(name..".fox").is_file() => name.gen_fox_cgi(name..".fox")
	if !".htaccess".is_file() => ".htaccess".gen_htaccess()
	if !:Makefile.is_file() => name.gen_cgi_makefile(:Makefile)
	return 0
}
