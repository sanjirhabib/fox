str/1
\""
""

str/2
\:hello
hello

str/3
\:hello\ world
hello world

str/4
\"hello \" world"
hello " world

str/5
\"hello \" world"
hello " world

str_xstr/6
\"\"hello\"".str_xstr()
\"hello"

str_xstr/7
\"\"$$hello\"".str_xstr()
hello

str_xstr/8
\"\"$$(hello)\"".str_xstr()
hello

x_c/9
\"x()".x_c()
x();

x_c/10
\"x().y()".x_c()
y(x());

x_c/11
\".y()".x_c()
.y();

x_c/12
\";.y()".x_c()
;.y();

json/13
\["hello"].json()
\["hello"]

json/14
\{"hello":"world"}.json()
\{"hello":"world"}

json/15
\{"hello":"world",}.json()
\{"hello":"world"}

json/16
\{hello:"world",}.json()
\{"hello":"world"}

json/17
\{"hello":"world","this":"is"}.json()
\{"hello":"world", "this":"is"}

json/18
\{"hello":"world","this":[1,2,3]}.json()
\{"hello":"world", "this":[1, 2, 3]}

url/19
\"table.*".path_matches("table.habib").int_var()
1

url/20
\"table.*".path_matches("table.habib")
1

url/21
\"/flat/".path_matches("/flat/")
1

url/22
\"/gola/".path_matches("/flat/")
0

url/23
\"/flat/**".path_matches("/flat/")
1

url/24
\"/flat/*".path_matches("/flat/")
0

url/25
\"/flat/*".path_matches("/flat/house/name/")
0

url/26
\"/flat/**".path_matches("/flat/house/name/")
1

url/27
\"/flat/**".path_matches("/rima/")
0

url/28
\"/flat/".path_matches("/rima/flat")
0

x_c/29
---
	---
	"hello".str_trim();
	---.x_c()
---
str_trim("hello"," \t\n\r");

x_c/30
---
	---
	dx();
	---.x_c()
---
dx("**",NULL,0);

x_c/31
---
	---
	"hello".http_out(,"lama")
	---.x_c()
---
http_out("hello","200 OK","lama",NULL);

x_c/32
---
	---
	a()(void*)(map*).b()
	---.x_c()
---
b((map*)(void*)a());

x_c/33
---
	---
	a()(char*).b()
	---.x_c()
---
b((char*)a());

x_c/34
---
	---
	return a.b()
	---.x_c()
---
return b(a);

x_c/35
---
	---
	mp2.map_id(0).data.sql_str()
	---.x_c()
---
sql_str(map_val(map_id(mp2,0),"data"));

x_c/36
---
	---
	a->b.c()
	---.x_c()
---
c(a->b);

x_c/37
---
	---
	a(b(c))
	---.c_x()
---
c.b().a()

x_c/38
---
	---
	b().a(d.c())
	---.x_c()
---
a(b(),c(d));

x_c/39
---
	---
	+b().a()
	---.x_c()
---
+a(b());

x_c/40
---
	---
	(int)a
	---.x_c()
---
(int)a;

x_c/41
---
	---
	a
	---.x_c()
---
a;

x_c/42
---
	---
	a()
	---.x_c()
---
a();

x_c/43
---
	---
	.a()
	---.x_c()
---
.a();

x_c/44
---
	---
	 .a()
	---.x_c()
---
\ .a();

x_c/45
---
	---
	"a".b()
	---.x_c()
---
b("a");

x_c/46
---
	---
	a.b+
	---.x_c()
---
a.b+;

x_c/47
---
	---
	a
	---.c_x()
---
a

x_c/48
---
	---
	a()
	---.c_x()
---
a()

x_c/49
---
	---
	a(b)
	---.c_x()
---
b.a()

x_c/50
---
	---
	a(b,c)
	---.c_x()
---
b.a(c)

x_c/51
---
	---
	a(b(),c)
	---.c_x()
---
b().a(c)

x_c/52
---
	---
	a(b(d),c)
	---.c_x()
---
d.b().a(c)

x_c/53
---
	---
	a(b(d+2),c)
	---.c_x()
---
b(d+2).a(c)

x_c/54
---
	---
	a()+ a(b(d+2),c)
	---.c_x()
---
a()+ b(d+2).a(c)

x_c/55
---
	---
	b("a")
	---.c_x()
---
"a".b()

x_c/56
---
	---
	a{b(c)}
	---.c_x()
---
a{c.b()}

x_c/57
---
	---
	a('b')
	---.c_x()
---
'b'.a()

x_c/58
---
	---
	a('b'+2)
	---.c_x()
---
a('b'+2)

x_c/59
---
	---
	2+'b'.a(c)
	---.x_c()
---
2+a('b',c);

x_c/60
---
	---
	(1+2).a()
	---.x_c()
---
a((1+2));

x_c/61
---
	---
	a()(char*).b()
	---.x_c()
---
b((char*)a());

x_c/62
---
	---
	{}
	---.x_c()
---
new_map();

x_c/63
---
	---
	[]
	---.x_c()
---
new_vec();

x_c/64
---
	---
	{0}
	---.x_c()
---
\{0};

x_c/65
---
	---
	xmap()
	---.x_c()
---
\xmap(End);

x_c/66
---
	---
	 .a()
	---.x_c()
---
\ .a();

x_c/67
---
	---
	b.a()
	---.x_c()
---
a(b);
	
x_c/68
---
	---
	 b.a()
	---.x_c()
---
---
	 a(b);
---

x_c/69
---
	---
	 b.a()
	hello.world
	---.x_c()
---
---
	 a(b);
	hello.world;
---

x_c/70
---
	---
	hello
	world
	---.x_c()
---
---
	hello;
	world;
---
x_c/71
---
	---
	a=:hello
	---.x_c()
---
---
	char* a="hello";
---

x_c/72
---
	---
	char* ding_dong(){
		return :sing_a_song
	}
	a=ding_dong()
	---.x_c()
---
---
	char* ding_dong(){
		return "sing_a_song";
	};
	char* a=ding_dong();
---

str_map/73
---
	----
	---
		hello

		world

	----.str_vec()
---
\["hello\n\nworld"]

str_map/74
---
	----
	---
		hello

		world
	hi
	----.str_vec()
---
\["hello\n\nworld", "hi"]

str_map/75
---
	----
	---
		hello

		world

	hi
	----.str_vec()
---
\["hello\n\nworld\n", "hi"]

str_map/76
---
	----
	---
		hello
		world
	---
	hi
	----.str_vec()
---
\["hello\nworld", "hi"]

str_map/77
---
	---
	hello=
	---.str_map()
---
\{"hello":null}

str_map/78
"".str_map()
\{}

str_map/79
---
	---
	a
	---.str_map()
---
\{"a":"a"}

str_map/80
---
	---
	hello
	---.str_map()
---
\{"hello":"hello"}

str_map/81
---
	---
	hello=world
	---.str_map()
---
\{"hello":"world"}

str_map/82
---
	---
	hello=world,this=is
	---.str_map()
---
\{"hello":"world", "this":"is"}

str_map/83
---
	---
	hello=
	---.str_map()
---
\{"hello":null}

str_map/84
---
	---
	=world
	---.str_map()
---
\{0:"world"}

str_map/85
---
	---
	=
	---.str_map()
---
\{0:null}

str_map/86
---
	---
	hello=world=hi
	---.str_map()
---
\{"hello":"world=hi"}

str_map/87
---
	---
	hello
	world
	hi
	---.str_map()
---
\{0:"hello", 1:"world", 2:"hi"}

str_map/88
---
	---
	hello\=world=hi
	---.str_map()
---
\{"hello=world":"hi"}

str_map/89
---
	---
	hello
	---.str_map()
---
\{"hello":"hello"}

str_map/90
---
	---
	hello
		world
	---.str_map()
---
\{"hello":{0:"world"}}

str_map/91
---
	---
	hello
		world=this
	---.str_map()
---
\{"hello":{"world":"this"}}

str_map/92
---
	---
	hello=world
		this
	---.str_map()
---
\{"hello":{0:"this"}}

str_map/93
---
	---
	hello=world
		this
	is
	---.str_map()
---
\{"hello":{0:"this"}, 0:"is"}

str_map/94
---
	---
	hello=---
		world
	---.str_map()
---
\{"hello":"world"}

str_map/95
---
	---
	hello=---
		world
			up
	---.str_map()
---
\{"hello":"world\n\tup"}

str_map/96
---
	---
	hello=---
		world
		this is a call
		from the sky

	---.str_map()
---
\{"hello":"world\nthis is a call\nfrom the sky"}

str_map/97
---
	---
	hello=---
		world
		this is a call
		from the sky
	for
	---.str_map()
---
\{"hello":"world\nthis is a call\nfrom the sky", 0:"for"}

str_map/98
---
	---
	hello=world
	---.str_map()
---
\{"hello":"world"}

str_map/99
---
	---
	hello=world
	---.str_map()
---
\{"hello":"world"}

str_map/100
---
	---
	=
		one=two
	---.str_map()
---
\{0:{"one":"two"}}

str_map/101
---
	---
	hello=world,hello=world
	---.str_map()
---
\{"hello":"world"}

str_map/102
---
	---
	hello=world,hi=again,hello=world
	---.str_map()
---
\{"hello":"world", "hi":"again"}

str_map/103
---
	---
	hello,world
	---.str_vec()
---
\["hello", "world"]

str_map/104
---
	---
	hello,world,0,1
	---.str_vec()
---
\["hello", "world", 0, 1]

str_map/105
---
	---
	=[]
		1
		2
		3

	---.str_map()
---
\{0:[1, 2, 3]}

str_map/106
---
	---
	m
		e
	cru
		b
	z

	---.str_map()
---
\{"m":{0:"e"}, "cru":{0:"b"}, 0:"z"}

str_map/107
---
	---
	name=:code hello=world
	---.str_map()
---
\{"type":"code", "name":"name", "hello":"world"}

str_map/108
---
	---
	name=:code pkey hello=world
	---.str_map()
---
\{"type":"code", "name":"name", "pkey":"pkey", "hello":"world"}

str_map/109
---
	---
	name=:code pkey hello=world
	age=:int
	---.str_map()
---
\{"name":{"type":"code", "name":"name", "pkey":"pkey", "hello":"world"}, "age":{"type":"int", "name":"age"}}

str_map/110
---
	---
	name=:code pkey hello=":world"
	age=:int
	---.str_map()
---
\{"name":{"type":"code", "name":"name", "pkey":"pkey", "hello":":world"}, "age":{"type":"int", "name":"age"}}

str_map/111
---
	---
	name=:code
	---.str_map()
---
\{"type":"code", "name":"name"}

run/112
---
	---
	a=1
	b=2
	if a > b => return :fail
	return :ok
	---.run()
---
ok

run/113
---
	---
	a=3
	b=2
	if a > b
		return :ok
	else
		return :fail
	return :fail
	---.run()
---
ok

run/114
---
	---
	return :ok
	return :fail
	---.run()
---
ok

run/115
---
	---
	:ok
	---.run()
---
ok

run/116
---
	---
	int total=0
	for i=1; i<=10; i++ => total+=i
	return total==55 && :ok || :fail
	---.run()
---
ok

run/117
---
	---
	int total=0
	for i=1; i<=10; i++
		total+=i
	return total==55 && :ok || :fail
	---.run()
---
ok

run/118
---
	---
	int total=0
	for i=1; i<=20; i++
		if i>10 => break
		total+=i
	return total==55 && :ok || :fail
	---.run()
---
ok

run/119
---
	---
	int total=0
	for i=1; i<=20; i++
		if i>10 => continue
		total+=i
	return total==55 && :ok || :fail
	---.run()
---
ok

run/120
---
	---
	int total=0
	while i<=10
		total+=i
		i++
	return total==55 && :ok || :fail
	---.run()
---
ok

run/121
---
	---
	int total=0
	while i<=100
		i++
		if i>10 => break
		total+=i
	return total==55 && :ok || :fail
	---.run()
---
ok

run/122
---
	---
	int total=0
	while i<=100
		i++
		if i>10 => continue
		total+=i
	return total==55 && :ok || :fail
	---.run()
---
ok

run/123
---
	---
	char* say_hello(){
		return :ok
	}
	return say_hello()
	---.run()
---
ok

run/124
---
	---
	int fib(int val){
		if val<2 => return val
		return fib(val-1)+fib(val-2)
	}
	return fib(10) == 55 ? :ok : :fail
	---.run()
---
ok

run/125
---
	---
	total=0
	for i=1;i<=10;i++
		total+=i
	return total == 55 ? :ok : :fail
	---.run()
---
ok

run/126
---
	---
	total=0
	while(i<=10)
		total+=i
		i++
	return total == 55 ? :ok : :fail
	---.run()
---
ok

run/127
---
	---
	mp=new_vec()
	for i=1; i<=10; i++
		mp.vec_add(i.int_var())	
	total=0
	mp.each v,k,i
		total=total+v.is_int()
	return total == 55 ? :ok : :fail
	---.run()
---
ok

eval/128
---
	---
	"hello%20world".url_str()
	---.eval()
---
hello world

eval/129
---
	---
	"hello".url_str()
	---.eval()
---
hello

eval/130
---
	---
	"hello".str_tolower()
	---.eval()
---
hello

eval/131
---
	---
	"hi".str_toupper()
	---.eval()
---
HI

eval/132
---
	---
	\NULL
	---.eval()
---
NULL
eval/133
---
	---
	"hello".sub_str(1,3)
	---.eval()
---
ell

eval/134
---
	---
	"hello"
	---.eval()
---
hello

eval/135
---
	---
	12
	---.eval()
---
12

eval/136
---
	---
	_globals.:test="
		name=habib
		age=23
		birth=1/1/1990
		city=Dhaka
		habib
			name=Sanjir
			age=21
	".str_map()
	_globals.:test.:name
	---.eval()
---
habib

eval/137
---
	---
	_globals.:test.:habib.:name
	---.eval()
---
Sanjir

eval/138
---
	---
	"hello".sub_str(1,3)
	---.eval()
---
ell

eval/139
---
	---
	"hello".sub_str(1,-1)
	---.eval()
---
ell

eval/140
---
	---
	_globals.:test.:habib.:name.sub_str(1,-1)
	---.eval()
---
anji

eval/141
---
	---
	_globals.:test.:habib.:name.sub_str(1)
	---.eval()
---
anjir

eval/142
---
	---
	1+1
	---.eval()
---
2

eval/143
---
	---
	1-2
	---.eval()
---
-1

eval/144
---
	---
	4/2
	---.eval()
---
2

eval/145
---
	---
	2+3*4
	---.eval()
---
14

eval/146
---
	---
	3*4+6
	---.eval()
---
18

eval/147
---
	---
	1+2*3+4
	---.eval()
---
11

eval/148
---
	---
	1+2*3+4*4/2+3-1
	---.eval()
---
17

eval/149
---
	---
	(1+2)*3+5*4/(2+3)-1
	---.eval()
---
12

eval/150
---
	---
	-(1+2)*3+5*4/(2+3)-1
	---.eval()
---
-6

eval/151
---
	---
	1 && 2
	---.eval()
---
2

eval/152
---
	---
	0 && 2
	---.eval()
---
0		

eval/153
---
	---
	1 && 2 && 4
	---.eval()
---
4

eval/154
---
	---
	1 && 2 && 4+8
	---.eval()
---
12

eval/155
---
	---
	1 && 2 || 3
	---.eval()
---
2

eval/156
---
	---
	1 || 2 || 3
	---.eval()
---
1

eval/157
---
	---
	1-1 && 2 || 3
	---.eval()
---
3

eval/158
---
	---
	1-1 && 2 || 3*4 || 4
	---.eval()
---
12

eval/159
---
	---
	1-1 && 2 || 3*4 && 0 || 4 && 5
	---.eval()
---
5

eval/160
---
	---
	1==5
	---.eval()
---
0

eval/161
---
	---
	2==1 && 30 || 2==2 && 70 || 100
	---.eval()
---
70

eval/162
---
	---
	_globals.:test.:age
	---.eval()
---
23

eval/163
---
	---
	_globals.:test.:age==23 && 40 || _globals.:test.:age==24 && 60 || 100
	---.eval()
---
40

eval/164
---
	---
	_globals.:test.:habib.:home || "Dhaka"
	---.eval()
---
Dhaka

eval/165
---
	---
	_globals.:test.:habib.:name || "Missing"
	---.eval()
---
Sanjir

eval/166
---
	---
	\:Hello\ World
	---.eval()
---
Hello World

eval/167
---
	---
	\"Hello :name! Your age is :age".str_replace({":name"::Habib,":age": 31})
	---.eval()
---
Hello Habib! Your age is 31

x_c/168
---
	---
	hello
	---.x_c()
---
hello;

x_c/169
---
	---
	if(hello)
	---.x_c()
---
if(hello) {};

x_c/170
---
	---
	if(hello) world;
	---.x_c()
---
if(hello) {world;};

x_c/171
---
	---
	if(hello) return world;
	---.x_c()
---
if(hello) {return world;};
	
x_c/172
---
	---
	if(hello) { return world; }
	---.x_c()
---
if(hello) { return world; };
	
x_c/173
---
	---
	if(hello) { return world; } //returning good
	---.x_c()
---
if(hello) { return world; }; //returning good
	
x_c/174
---
	---
	if(hello1){
		return world;
	} //returning good
	---.x_c()
---
---
	if(hello1){
		return world;
	}; //returning good
---

x_c/175
---
	---
	if(hello2)
		return world;
	---.x_c()
---
---
	if(hello2){
		return world; };
---

x_c/176
---
	---
	if(hello3)
		return world;

	---.x_c()
---
---
	if(hello3){
		return world;
	};
---

x_c/177
---
	---
	if(hello4)
		return world;

	kahani();
	---.x_c()
---
---
	if(hello4){
		return world;
	};
	kahani();
---

x_c/178
---
	---
	if(hello5)
		return world;
	kahani();
	---.x_c()
---
---
	if(hello5){
		return world; };
	kahani();
---

x_c/179
---
	---
	if(hello6)
		sita();
		return world;
	kahani();
	---.x_c()
---
---
	if(hello6){
		sita();
		return world; };
	kahani();
---

x_c/180
---
	---
	if(hello7)
		sita();
		return world; //gree!
	kahani();
	---.x_c()
---
---
	if(hello7){
		sita();
		return world; }; //gree!
	kahani();
---

x_c/181
---
	---
	if(hello8)
		sita();
		return world; //gree!

	kahani();
	---.x_c()
---
---
	if(hello8){
		sita();
		return world; //gree!
	};
	kahani();
---

x_c/182
---
	---
	if(hello21)
		sita();
		return world; //gree!
	// Free!!
	kahani();
	---.x_c()
---
---
	if(hello21){
		sita();
		return world; }; //gree!
	// Free!!
	kahani();
---

x_c/183
---
	---
	if(hello2) //hi
		return world;
	---.x_c()
---
---
	if(hello2){ //hi
		return world; };
---

x_c/184
---
	---
		if(hello3)
			return world;

	---.x_c()
---
---
		if(hello3){
			return world;
		};
---

x_c/185
---
	---
		if(hello4)
			return world;
	
		kahani();
	---.x_c()
---
---
		if(hello4){
			return world;
		};
		kahani();
---

x_c/186
---
	---
		if(hello5)
			return world;
		kahani();
	---.x_c()
---
---
		if(hello5){
			return world; };
		kahani();
---

x_c/187
---
	---
		if(hello10)
			sita();
			return world;
		kahani();
	---.x_c()
---
---
		if(hello10){
			sita();
			return world; };
		kahani();
---

x_c/188
---
	---
		if(hello11)
			sita();
			return world; //gree!
		kahani();
	---.x_c()
---
---
		if(hello11){
			sita();
			return world; }; //gree!
		kahani();
---

x_c/189
---
	---
		if(hello12)
			sita();
			return world; //gree!

		kahani();
	---.x_c()
---
---
		if(hello12){
			sita();
			return world; //gree!
		};
		kahani();
---

x_c/190
---
	---
		if(hello13)
			sita();
			return world; //gree!
		// Free!!
		kahani();
	---.x_c()
---
---
		if(hello13){
			sita();
			return world; }; //gree!
		// Free!!
		kahani();
---

x_c/191
---
	---
		if(hello14) //hi
			return world;
	---.x_c()
---
---
		if(hello14){ //hi
			return world; };
---

x_c/192
---
	---
	if(a)
		b
	else if(c)
		d
	else
		e
	---.x_c()
---
---
	if(a){
		b;
	}else if(c){
		d;
	}else{
		e; };
---

x_c/193
---
	---
	if(a)
		b
	else if(c)
		d
	else
		e

	---.x_c()
---
---
	if(a){
		b;
	}else if(c){
		d;
	}else{
		e;
	};
---

x_c/194
---
	---
	if(a)
		a.b().c();
	---.x_c()
---
---
	if(a){
		c(b(a)); };
---

x_c/195
---
	---
	switch(x)
		case 1:
			run;
			break;
		case 2:
			run;
			break;
		default:
			return 0;

	---.x_c()
---
---
	switch(x){
		case 1:
			run;
			break;
		case 2:
			run;
			break;
		default:
			return 0;
	};
---

x_c/196
---
	---
	do
		hello;
	while(1);
	---.x_c()
---
---
	do{
		hello;
	}while(1);
---

x_c/197
---
	---
	if hello
		return gelo;

	---.x_c()
---
---
	if(hello){
		return gelo;
	};
---

x_c/198
---
	---
	if hello && gelo && selo>2
		rima;
		return gelo;
		cholo
	else if nori>bori
		gilam
	else
		bari
		return sari
	a=1
	---.x_c()
---
---
	if(hello && gelo && selo>2){
		rima;
		return gelo;
		cholo;
	}else if(nori>bori){
		gilam;
	}else{
		bari;
		return sari; };
	int a=1;
---

x_c/199
---
	---
	if hello //hi
		return gelo;

	---.x_c()
---
---
	if(hello){ //hi
		return gelo;
	};
---

x_c/200
---
	---
	do
		rima
		shen
	while gola>mola
	---.x_c()
---
---
	do{
		rima;
		shen;
	}while(gola>mola);
---

x_c/201
---
	---
	while((hello))
		gelo

	bim
	---.x_c()
---
---
	while((hello)){
		gelo;
	};
	bim;
---

x_c/204
---
	---
	if(hello) => hi
	---.x_c()
---
if(hello){ hi; };

x_c/205
---
	---
	if(hello) => hi; goram
	---.x_c()
---
if(hello){ hi; goram; };

x_c/206
---
	---
	if hello => hi
	---.x_c()
---
if(hello){ hi; };

x_c/207
---
	---
	if hello && hi => hi; gola+gita; while(23+32) => rima++
	---.x_c()
---
if(hello && hi){ hi; gola+gita; while(23+32){ rima++; }; };

	
x_c/208
---
	---
	if(hello) => hi; goram
	ding->dong
	---.x_c()
---
---
	if(hello){ hi; goram; };
	ding->dong;
---

x_c/209
---
	---
	if(hello) => hi; goram; while(1) => noti
	ding->dong
	---.x_c()
---
---
	if(hello){ hi; goram; while(1){ noti; }; };
	ding->dong;
---


x_c/214
---
	---
	:hello.puts()
	---.x_c()
---
puts("hello");

x_c/215
---
	---
	a=[]
	---.x_c()
---
map* a=new_vec();

x_c/216
---
	---
	hello.map_val("hi").map_val("go")
	---.x_c()
---
map_val(map_val(hello,"hi"),"go");

x_c/217
---
	---
	hello.:hi.:go
	---.x_c()
---
map_val(map_val(hello,"hi"),"go");

x_c/218
---
	---
	hello.:hi.:go.hi()
	---.x_c()
---
hi(map_val(map_val(hello,"hi"),"go"));

x_c/219
---
	---
	hello."hi"."go"
	---.x_c()
---
map_val(map_val(hello,"hi"),"go");

x_c/220
---
	---
	xstr(:1,2)
	---.x_c()
---
xstr("1",int_str(2), End);

x_c/221
---
	---
	out_c.vec_add(xstr(outdir,name,".c"))
	---.x_c()
---
vec_add(out_c,xstr(outdir,name,".c", End));

sql/223
---
	---
	"flat".sql_add_limit(10)
	---.eval()
---
select * from flat limit 10

sql/224
---
	---
	"flat".sql_add_limit(10,3)
	---.eval()
---
select * from flat limit 30, 10

sql/225
---
	---
	\"hello \"hi\""
	---.eval()
---
hello "hi"

sql/226
---
	---
	\"hello".to_sql()
	---.eval()
---
select * from hello

sql/227
---
	---
	\"select * from mila order by bita,sita desc,rita asc limit 15".sql_lite()
	---.eval()
---
select * from mila order by bita, sita desc, rita, 1 limit 15;

sql/228
---
	---
	\"select * from hello".sql_lite()
	---.eval()
---
select * from hello order by 1;

sql/229
---
	---
	\"select * from hello where bello=gello".sql_lite()
	---.eval()
---
select * from hello where bello=gello order by 1;

sql/230
---
	---
	\"select * from hello where bello=\"gello\"".sql_lite()
	---.eval()
---
select * from hello where bello="gello" order by 1;

sql/231
---
	---
	\"select date(hello+world,world()) from nothing".sql_lite()
	---.eval()
---
select substr(hello+world,1,10) from nothing order by 1;

sql/232
---
	---
	\"select hello, bello+tira() as relo, gello from tello".sql_lite()
	---.eval()
---
select hello, bello+tira() as relo, gello from tello order by 1;

sql/233
---
	---
	\"select id, name, value from hello left join tira on (sira=mira and gala=bala) where bello=\"gello\" and gela=mela and ziri is not null and 12>doka order by sila, 1 limit 10, 10".sql_lite()
	---.eval()
---
select id, name, value from hello left join tira on (sira=mira and gala=bala) where bello="gello" and gela=mela and ziri is not null and 12>doka order by sila, 1 limit 10, 10;

sql/234
---
	---
	\"select * from mila order by bita, sita desc, rita limit 15".sql_lite()
	---.eval()
---
select * from mila order by bita, sita desc, rita, 1 limit 15;

sql/235
---
	---
	\"select * from biri where nima=kila".sql_add_where("rita=pita".str_map())
	---.eval()
---
select * from biri where nima=kila and rita=pita
	
sql/236
---
	---
	\"select tello.*, milo.* from tello as milo left join gara as tara on mini=kali".sql_lite()
	---.eval()
---
select tello.*, milo.* from tello as milo left join gara as tara on mini=kali order by 1;

sql/237
---
	---
	\"select hello.*, tira.* from hello left join tira on (sira=mira and gala=bala) where bello=\"gello\" and gela=mela or dila=kila group by dira, kira having rola=kola order by sila, 1 limit 10, 10".sql_lite()
	---.eval()
---
select hello.*, tira.* from hello left join tira on (sira=mira and gala=bala) where bello="gello" and gela=mela or dila=kila group by dira, kira having rola=kola order by sila, 1 limit 10, 10;

args_map/238
---
	---
	void hello(char* name){
		args_map().px()
	}
	---.x_c()
---
---
	void hello(char* name){
		px(xmap("name",name, End),1);
	};
---

mstr/239
\"hello".str_mstr()
hello


mstr/240
\"hello %".str_mstr()
hello %


mstr/241
---
	---
	"hello %{a}"
	---.str_mstr()
---
mstr("hello %s", a, End)


mstr/242
---
	---
	"hello %{a} %{b +c}"
	---.str_mstr()
---
mstr("hello %s %s", a, b +c, End)


mstr/243
---
	---
	"hello %{a} %d{b +c}"
	---.str_mstr()
---
mstr("hello %s %d", a, b +c, End)


mstr/244
---
	---
	"hello %f{a} %d{b +c}"
	---.str_mstr()
---
mstr("hello %f %d", a, b +c, End)


mstr/245
---
	---
	"hello %f{a} % %d{b +c}"
	---.str_mstr()
---
mstr("hello %f % %d", a, b +c, End)


mstr/246
---
	---
	"hello %f{a} %% %d{b +c}"
	---.str_mstr()
---
mstr("hello %f % %d", a, b +c, End)


mstr/247
---
	---
	"hello %f{a} %%% %d{b +c}"
	---.str_mstr()
---
mstr("hello %f %% %d", a, b +c, End)


vec_splice/249
\[:one,:two].vec_splice(0,0,[:pre1,:pre2]).json()
\["pre1", "pre2", "one", "two"]


vec_splice/250
\[:one,:two].vec_splice(1,0,[:pre1,:pre2]).json()
\["one", "pre1", "pre2", "two"]


vec_splice/251
\[:one,:two].vec_splice(1,1,[:pre1,:pre2]).json()
\["one", "pre1", "pre2"]


vec_splice/252
\[:one,:two,:three].vec_splice(1,1,[:pre1,:pre2]).json()
\["one", "pre1", "pre2", "three"]


vec_splice/253
\[:one,:two,:three].vec_splice(-1,1,[:pre1,:pre2]).json()
\["one", "two", "pre1", "pre2"]


vec_splice/254
---
	----
	one=---
		hello
		world
	---
	---
		This
		is
		It!
	----.str_map()
---
\{"one":"hello\nworld", 0:"This\nis\nIt!"}



str_xstr/255
---
	----
	 $hello()
	----.str_xstr()
---
xstr(" ", hello, "()")


str_xstr/256
---
	----
	$hello()
	----.str_xstr()
---
xstr(hello, "()")


str_xstr/257
---
	----
	$hello$world
	----.str_xstr()
---
xstr(hello, world)


str_xstr/258
---
	----
	$hello$(world)
	----.str_xstr()
---
xstr(hello, world)


str_xstr/259
---
	----
	$hello$(world+1)
	----.str_xstr()
---
xstr(hello, world+1)


x_c/260
---
	----
	str=""
	str.read_num()
	----.x_c()
---
---
	char* str="";
	read_num(&str);
---


x_c/262
---
	----
	_globals.res.sess.json().write_file("/tmp/sess.%s".mstr(sess_id()))
	----.x_c()
---
---
	write_file(json(map_val(map_val(_globals,"res"),"sess"),0),mstr("/tmp/sess.%s",sess_id(), End),0);
---


x_c/263
---
	----
	if !_globals.verbose => return msg
	----.x_c()
---
---
	if(!map_val(_globals,"verbose")){ return msg; };
---

x_c/264
---
	----
	"/tmp/sess.%s".mstr(sess_id())
	----.x_c()
---
---
	mstr("/tmp/sess.%s",sess_id(), End);
---



expr_type/266
---
	----
	"hello"
	----.x_toks().expr_type()
---
char*


expr_type/267
---
	----
	1+3
	----.x_toks().expr_type()
---
int


expr_type/268
---
	----
	_globals
	----.x_toks().expr_type()
---
map*


expr_type/269
---
	----
	_globals->len
	----.x_toks().expr_type()
---
int


expr_type/270
---
	----
	_globals->vars
	----.x_toks().expr_type()
---
void**


expr_type/271
---
	----
	_globals->vars[0]
	----.x_toks().expr_type()
---
void*


expr_type/272
---
	----
	_globals->pairs
	----.x_toks().expr_type()
---
struct cons*


expr_type/273
---
	----
	_globals->pairs[i].id
	----.x_toks().expr_type()
---
char*


expr_type/274
---
	----
	_globals->pairs[i].val
	----.x_toks().expr_type()
---
void*


expr_type/275
---
	----
	_globals->pairs[i].mila()
	----.x_toks().expr_type()
---
NULL


expr_type/276
---
	----
	typedef long long size_t;
	----.c_structs()
---
\{"size_t":"long long"}


expr_type/277
---
	----
	typedef map* list;
	----.c_structs()
---
\{"list":"map*"}


expr_type/278
---
	----
	struct hello {
		int hi;
		char* goma;
	};
	----.c_structs()
---
{"struct hello":{"hi":"int", "goma":"char*"}}


expr_type/279
---
	----
	typedef struct hello {
		int hi;
		union bingo {
			char* mina;
			long long shima;
		};
		char* goma;
	} hello;
	----.c_structs()
---
{"struct hello":{"hi":"int", "mina":"char*", "shima":"long long", "goma":"char*"}, "hello":{"hi":"int", "mina":"char*", "shima":"long long", "goma":"char*"}}


expr_type/280
---
	----
	typedef struct _hello {
		int hi;
		union bingo {
			char* mina;
			long long shima;
		};
		char* goma;
	} hello;
	----.c_structs()
---
{"struct _hello":{"hi":"int", "mina":"char*", "shima":"long long", "goma":"char*"}, "hello":{"hi":"int", "mina":"char*", "shima":"long long", "goma":"char*"}}

map_index/281
---
	----
	mp={}
	mp[0]
	----.x_c()
---
---
	map* mp=new_map();
	map_id(mp,0);
---

map_index/282
---
	----
	mp={}
	mp[0][1]
	----.x_c()
---
---
	map* mp=new_map();
	map_id(map_id(mp,0),1);
---

map_index/283
---
	----
	mp={}
	mp[0]=[1]
	----.x_c()
---
---
	map* mp=new_map();
	set(mp,0,xvec(int_var(1), End));
---

map_index/284
---
	----
	mp=[]
	ret={}
	ret[mp[0]]=mp[1]
	----.x_c()
---
---
	map* mp=new_vec();
	map* ret=new_map();
	add(ret,map_id(mp,0),map_id(mp,1));
---

expr_type/285
---
	----
	_globals->len
	----.x_toks().expr_type()
---
int

expr_type/286
---
	----
	_globals->len-1
	----.x_toks().expr_type()
---
int

expr_type/287
---
	----
	_globals->len+1
	----.x_toks().expr_type()
---
int

expr_type/288
---
	----
	_globals[_globals->len-1]
	----.x_c()
---
map_id(_globals,_globals->len-1);














//mmv?^[a-z_]\+\/[0-9]\+$y'mp$+0j
