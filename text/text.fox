#include "text.h"
run(){
	if args.exec_cmdline() => return 0
	in=args[1]
	sizeof(unsigned short).int_var().px()
	return 0
}
char* ucs_str(int* in,int len=0){
	if !len
		while in[len++]
	slen=0
	i=0
	while i<len
		slen+=in[i].unicode_len()
		i++
	ret=slen.new_str()
	ptr=ret
	i=0
	while i<len
		in[i].unicode_utf(ptr)
		ptr+=ptr.str_len()
		i++
	return ret
}
int* str_ucs(char* in){
	len=in.str_len()
	int* ret=((in.utf_strlen()+1)*sizeof(int)).new_blob()
	code=0
	i=0
	while (code=in.utf_unicode())
		ret[i++]=code
		in+=in.utf_len()
	ret[i]=0
	return ret
}
int is_letter(int code){
	if code>='a' && code<='z' || code>='A' && code<='Z' || code>='0' && code<='9' || code>0x0980 && code<0x09F7
		return 1
	return 0
}
int* word_end(int* in){
	while *in
		if (*in).is_letter() => in++; continue
		if *in=='\'' && in[1].is_letter() => in++; continue
		break
	return in
}
int* word_start(int* in){
	while *in && !(*in).is_letter() => in++
	return in
}
int* ucs_substr(int* in, int from, int upto){
	return in.sub_str(from*sizeof(int),upto*sizeof(int))
}
int ucs_len(int* in){
	return in.str_len()/sizeof(int)
}
map* ucs_words(int* uin){
	ret=[]
	while *uin
		head=uin.word_start()
		if !*head => break
		tail=head.word_end()
		ret[]=head.ucs_substr(0, tail-head)
		uin=tail
	return ret
}
map* str_words(char* in){
	uin=in.str_ucs()
	ret=[]
	while *uin
		head=uin.word_start()
		if !*head => break
		tail=head.word_end()
		ret[]=head.ucs_str(tail-head)
		uin=tail
	return ret
}
void go(char* in){
	codes=in.str_ucs()
	i=0
	while codes[i++]
		codes[i-1].px()
	codes.ucs_str().px()
}
char* stem_bangla(char* in){
	{{
		েরগুলোর
		েরগুলো
		গুলোর
		গুলো
		েয়েছিলেন া
		.েছিলেন .
		েয়েছিল া
		েছিলেন
		য়েছিল
		েছিল
		চ্ছিলেন
		েরটা
		েরটার
		রছ র
		রব র
		েল
		েলো
		ওয়া
		েয়ে া
		চ্ছিল
		চ্ছিস
		েছেন
		য়েছে
		বেন
		লেন
		দের
		ছিস
		ছিলি
		টির
		টার
		চ্ছি
		চ্ছে
		চ্ছ
		েছ
		েছে
		ের
		ার
		েন
		তো
		কে
		তে
		রা
		িস
		ছি
		ছে
		লি
		বি
		টি
		টা
		য়ে
		.ে .
		ে
		ই
		য়
		ও

	}}.each val, key
		if val==="."
			key=key+1
			if in.str_end(key) && in.sub_str(-key.str_len()-6,3)==="ে"
				return in.sub_str(0,-key.str_len()-6).."া"..in.sub_str(-key.str_len()-3,3)
			continue
		if in.str_end(key)
			return in.sub_str(0, -key.str_len())..val
	return in
}
int stem_test(){
	errs=0
	{{
		এটাই এটা
		সেটাই সেটা
		এটাও এটা
		সেটাও সেটা
		হয়তো হয়
		করলতো করল
		এটাকে এটা
		আমাকে আমা
		হাসতে হাস
		গাইতে গাই
		রহিমরা রহিম
		করিমরা করিম
		খাচ্ছি খা
		যাচ্ছি যা
		হচ্ছিল হ
		হচ্ছে হ
		যাচ্ছে যা
		যাচ্ছিস যা
		খাচ্ছিস খা
		যাচ্ছিলেন যা
		খাচ্ছিলেন খা
		যাচ্ছ যা
		খাচ্ছ খা
		হয়েছে হ
		খেয়েছে খে
		দেখেছ দেখ
		পেরেছ পের
		করেছে কর
		পেরেছে পের
		করেছেন কর
		পেরেছেন পের
		করছ কর
		পারছ পার
		করব কর
		পারব পার
		গেল গ
		পেল প
		খেলো খ
		যাওয়া যা
		খাওয়া খা
		গেয়ে গা
		পেয়ে পা
		হয় হ
		খায় খা
		হয়ে হ
		ধুয়ে ধু
		হয়েছিল হ
		পেয়েছিল পা
		গেয়েছিল গা
		করেছিল কর
		বলেছিল বল
		পেয়েছিলেন পা
		গেয়েছিলেন গা
		হেসেছিলেন হাস
		নেচেছিলেন নাচ
		করেছিলেন কর
		বলেছিলেন বল
		করলেন কর
		বললেন বল
		রহিমদের রহিম
		করিমদের করিম
		হেসে হাস
		নেচে নাচ
		রেখে রাখ
		রহিমের রহিম
		করিমের করিম
		চলার চল
		বলার বল
		দেখেন দেখ
		করেন কর
		দেখবেন দেখ
		করবেন কর
		দেখিস দেখ
		করিস কর
		দেখছিস দেখ
		করছিস কর
		দেখছিলি দেখ
		করছিলি কর
		করছি কর
		ভাবছি ভাব
		করছে কর
		পারছে পার
		দেখলি দেখ
		করলি কর
		দেখবি দেখ
		করবি কর
		বলে বল
		বসে বস
		একটি এক
		দশটি দশ
		একটির এক
		দশটির দশ
		রহিমেরটা রহিম
		করিমেরটা করিম
		রহিমেরটার রহিম
		করিমেরটার করিম
		এটা এ
		ওটা ও
		এটার এ
		ওটার ও
		এগুলো এ
		তারগুলো তার
		এগুলোর এ
		তারগুলোর তার
		রহিমেরগুলো রহিম
		করিমেরগুলো করিম
		রহিমেরগুলোর রহিম
		করিমেরগুলোর করিম
	}}.each val, key
		if key.stem_bangla()!==val
			"$key!=$(key.stem_bangla()) -- correct is $val".px()
			errs++
	return errs
}
