int chdir(const char* path);
void* invoke(map* v, char* name);
map* reflect();
int max_mem();
int curr_mem();
char* version();
map* args_map();
map* args(int argc, char** argv);
void* px(void* str, int newline);
void xexit(int val);
void* fox_error(char* msg, int dump);
void* call_php(map* params, char* func);
int make(map* files, char* outdir);
int foxc(char* file);
int compile(map* files, char* outdir, char* outfile, char* options, int release, int exe);
char* file_dir(char* file);
char* file_rename(char* file, char* dir, char* delext, char* addext, char* prefix, char* postfix);
char* sane_dir(char* dir);
map* build(map* files, char* outdir);
char* mem_usage();
char* int_kb(size_t i, char* unit);
char* int_human(int i, char* unit, char* zero);
map* env_vars();
char* substr(char* src, int from, int len);
char* mstr(char* format, ...);
char* str_add(char* str1, char* str2);
char* cat_char(char* str, char c);
char* va_str(char* format, va_list args);
void* verbose(char* msg, ...);
void* dx(void* data, char* name, int panic);
int neq(char* str, char* str1);
int eq(char* str, char* str1);
char* cwd();
char* write_file(char* data, char* filename, int readonly);
char* fox_read_file(char* filename, int error_on_fail);
char* read_stdin(int size, char* terminator);
char* str_unquote(char* str);
char* str_escape(char* head);
char* str_end(char* str, char* end);
int str_start(char* str, char* start);
char* str_chr(char* str, char c);
char* ltrim(char* str, char* chars);
char* rtrim(char* str, char* chars);
char* str_trim(char* str, char* chars);
int line_isempty(char* line);
int line_len(char* line);
int lchars(char* str, char* chars);
int rchars(char* str, char* chars);
int has_str(char* str, char* substr);
char* str_replace(char* str, void* find, void* replace);
char* outx(char* str);
char* flush_out();
map* xadd(map* mp, ...);
int is_numeric(char* str);
map* to_map(void* val);
map* del_index(map* mp, int idx);
map* map_del_key(map* mp, char* key);
map* map_del(map* mp, int idx, int len);
map* xjson_map(char* in, int type);
map* xjson_map_recurse(char** line, int type);
int str_level(char* line);
int block_level(char* str);
void* marked_str(char* str, char* name);
map* map_add_pair(map* mp, void* name, void* value, int type);
map* add_name_val(map* mp, char* str, char** name, char** val, int type);
char* read_as_block(char** from, int level, char* terminator);
map* block_map(char** from, int inlevel, int maptype);
map* xkeys(char* str);
map* xindex(char* str);
map* xarray(char* str);
map* str_vec(void* str);
void cache_blast(char* type);
void* cache(void* key, char* type, void* out);
map* str_map(char* str, int type);
void rewrite_ptr(mempage* pg, void** ptr);
void rewrite_ptrs(mempage* old);
int copy_page(mempage* from, mempage* to);
int page_map(mempage* pg);
int dump_chain(mempage* pg, int line);
int check_chains(mempage* pg, int line);
int total_kb();
int page_maps(char* title);
map* vec_del(map* mp, int from, int len);
map* vec_shift(map* mp, int idx, int len, int offset);
map* vec_sub(map* mp, int from, int len);
map* vec_slice(map* mp, int from, int len);
map* map_splice(map* mp, int from, int del, map* ad);
void* vec_pop(map* mp);
map* vec_splice(map* mp, int from, int del, map* add);
char* str_has(char* str, char* sub);
void gotoxy(int x, int y);
int floor_pow2(int i);
map* vec_dup(map* mp);
map* map_dup(map* mp);
map* map_merge(map* mp1, map* mp2);
map* vec_merge(map* mp1, map* mp2);
int utest(char* found, char* expect, char* in, char* title);
map* map_compact(map* mp);
map* vec_reverse(map* mp);
map* vec_compact(map* mp);
map* change_key(map* mp, int idx, char* id);
char* old_decl_type(map* mp, int idx);
map* add_id(map* mp, int idx);
map* add_key(map* mp, char* k, int type);
char* str_upper(char* s);
char* str_lower(char* s);
map* str_split(char* str, char* by, int limit);
char* toks_str(map* mp);
char* map_join(map* mp, char* joiner);
char fox_at(char* str, int idx);
char* indent_str(int i);
int str_chars(char* str, char* chars);
char* map_str(map* mp);
char* map_str_indent(map* mp, int indent);
map* dir_files(char* path);
char* end_word(char* str, char* words);
char* has_word(char* str, char* words);
int is_word(char* word, char* list);
int terminate_words(char* in);
map* map_vec(map* mp);
map* toks_keywords(map* mp, char* keywords);
map* map_split(map* mp, char* str, int limit);
size_t file_time(char* file);
int is_num(char c);
int is_alphanum(char c, char* others);
int is_alpha(char c, char* others);
int is_oper(char c);
int str_is_oper(char* str);
int str_is_num(char* str);
int is_code(char* str);
char* read_num(char** in);
char* skip_over(char* in, char* chars);
char* skip_word(char* in, char* seperators);
void* read_value(char** str, char* sep);
char* read_upto(char** in, char* terminators);
char* read_alpha(char** in);
char* fox_read_symbol(char** in);
char* fox_read_oper(char** in, char term);
char* read_upto_word(char** in, char* upto);
char* read_theline(char** in);
char* read_newline(char** in);
char* read_space(char** in);
char* read_heredoc(char** in);
char* read_multistr(char** in);
char* read_quote(char** in);
map* tokenizer(char** line, char* comment);
char* xlog(char* str);
char closing_paren(char c);
char char_at(char* str, int i);
char* char_str(char c);
int map_has_word(map* mp, char* str);
int is_keyword(char* str);
char* toks_c(map* mp);
map* add_ctok(void* data, map* mp, int iscode);
map* c_tokenizer(char** line, char term);
int func_dot(map* mp, int idx);
map* heredoc_parts(char* str);
map* heredoc_vars(map* mp);
map* heredoc_str(map* mp);
map* dot_each(map* mp);
map* map_implode(map* mp, char* joiner);
int tok_indent(char* str);
int has_chars(char* line);
int requires_semicolon(map* mp, int idx);
map* add_semicolon(map* mp, int recurse);
char* hello();
int tok_endl(map* mp, int from);
map* force_curly(map* mp);
map* add_curly(map* mp, int recursive);
map* dot_key(map* mp);
int str_hasvar(char* in);
char* str_mstr(char* in);
map* xstr_parts(char* in);
char* str_xstr(char* in);
map* str_dollars(map* mp);
map* single_quotes(map* mp);
map* colon_str(map* mp);
map* dot_func(map* mp);
map* map_tox(map* mp);
int stm_end(map* mp, int idx, char* words, int including);
int stm_start(map* mp, int idx, char* terms);
map* syn_func(map* syn, int with_body);
map* syn_funcs(map* mp, int with_body);
map* file_vec(char* in);
map* file_map(char* in);
map* map_keys(map* mp);
char* drop_right(char* str, char* w);
char* drop_left(char* str, char* w);
map* read_struct(map* toks);
map* c_structs(char* in);
map* x_funcs(char* in, int with_body);
map* x_toks(char* in, int is_script);
map* func_params(map* func);
map* func_param(map* func);
map* func_add_param(map* func, map* add);
map* func_rename(map* func, char* name);
char* func_name(map* func);
map* map_assign(map* exp1, map* exp2);
map* call_count(map* toks, map* counter, char* infunc);
map* file_deadcode(char* file);
map* auto_types(map* toks, char* context, int is_script, map* env, map* fns, map* func, int idx);
char* is_typecast(map* toks, int idx);
char* is_name(char* in);
char* head_type(map* toks, int idx, int upto, map* env, map* fs);
int expr_tail(map* toks, int idx, char* expr);
int expr_head(map* toks, int idx, char* expr);
map* add_return(map* toks);
map* wrap_call(map* tok, char* func);
map* type_convert(map* tok, char* outtype, map* env, map* fs, map* fn);
map* param_c(map* params, map* env, map* fs, map* fn);
char* file_ast(char* in);
char* ast_c(map* ast);
map* block_ast(map* toks, char* seperator);
map* toks_ast(map* toks, int* idx, char* upto);
map* syn_expand_macro(map* syn, int idx);
map* syn_is_macro(map* syn, int idx);
map* syn_set_param(map* syn, int idx, map* params);
map* syn_func_param(map* syn, int idx);
map* syn_func_body(map* syn);
map* syn_remove_default(map* syn);
char* expr_type(map* toks, int idx, int upto, map* env, map* fs);
char* assign_to_func(map* tok);
int next_tok(map* toks, int from, char* tok, int upto);
int syn_has(map* syn, char* words);
char* syn_flow_name(map* syn);
int is_flow(map* syn);
map* syn_flow_condition(map* syn, int no);
map* syn_flow_body(map* syn, int no);
char* syn_is_call(map* syn, int idx);
char* syn_var_name(map* syn);
char* syn_var_type(map* syn);
int syn_assign_val(map* syn);
int is_assign(map* syn);
int is_var_decl(map* syn);
int is_func_decl(map* syn);
char* fox_h(char* infile, char* outfile, int with_foxh);
char* fox_c(char* infile, char* outfile);
map* x_map(char* in);
char* c_x(char* in);
char* x_c(char* in);
char* func_ccall(map* fn);
char* map_ccode(void* mp);
char* callfunc_c(map* funcs);
char* file_foxh(char* infile, char* outfile);
char* func_cdecl(map* fn, int show_default);
char* funcs_cdecl(map* fns, int show_default);
char* foxh();
char* write_foxh(char* outfile);
char* fox_phpc(char* infile, char* outfile);
char* write_phpconfig();
char* write_callfunc(char* outfile);
map* eval_params(map* sent, char* name, map* env);
char* to_c(void* val);
char* str_shorten(char* in, int max);
char* call_c(map* params, char* name);
void* call_func(map* params, char* name, map* env);
void* data_exec(void* data, map* env);
static void* eval_toks(map* mp, map* env);
static void* eval_expr(map* mp, int* idx, map* env, int level);
void* eval(char* in, map* env);
int eval_expr_cont(map* mp, int idx, map* env, void** last, int level);
int is_true(void * val);
char* read_line(FILE* fp);
char* skip_quote(char* str);
char* str_toupper(char* str);
char* str_tolower(char* str);
char* str_title(char* str);
char hex_char(char* in);
char* rand_str(int len);
int str_char_count(char* str, char c);
char* write_c(char* infile, char* outfile);
map* command_line(char* in, int argc, char** argv);
int is_web();
map* param_test(char* one, char* two);
map* cmdline_params(map* args, char* func);
int test_add(int a, int b);
map* test_map(map* out);
int run_cmdline(map* args);
int utests(char* test, char* file);
char* file_path(char* file);
map* load_global(char* file);
int err_msg(char* msg, char** ptr);
char* tutorial();
char* h(char* in);
char* type_name(int type);
char* ptr_name(void* var);
int is_file(char* filename);
char* fork_exec(char* cmd, map* params);
map* source_files();
map* source_funcs();
map* file_funcs(char* filename);
char* help();
map* funcs();
void* run(char* in);
void* fox_eval(map* mp, map* env, int* halt);
void src(map* mp, int from, int len, char* msg);
map* structs();
map* macros();
map* source_structs();
map* source_macros();
int fib(int i);
map* toks_syn(map* toks, int recurse);
time_t str_time(char* in);
char* time_str(time_t timer);
char* increase_version();
int call_variadic_int(map* mp, void* fp, char* name);
void* call_variadic_ptr(map* mp, void* fp, char* name);
map* vec_rdup(map* mp);
map* toks_replace(map* in, map* replace);
map* toks_join(map* in, char* by);
map* toks_align(map* in);
map* toks_split(map* in, char* by, int limit);
map* expand_macros(map* mp, map* macros);
map* c_macros(char* in);
map* toks_macros(map* mp);
void devel(char* file);
int is_inline_vector(map* toks, int idx);
map* string_operators(map* toks);
map* inline_vectors(map* toks);
int msleep(int msecs);
char* time_ago(char* stime);
char* ptr_id(void* ptr);
char* today();
char* now();
char* datetime();
void test_loop();
int crash();
int str_ascii(char* in);
map* sql_tokenizer(char** line);
map* prop_tokenizer(char** line);
void benchmark_gc();
char* str_echo(char* str);
map* map_echo(map* in);
char* str_join(char* str1, char* joiner, char* str2);
map* read_paren(map* mp, char** line, map*(*func)(char** ));
map* set_map(void* val, map* mp, int idx);