#line 2 "src/foxparser.fox"

#include <core.h>
#include <foxparser.h>

char* fox_read_oper(char** in,char term){
	str=*in
	from=*in
	while(*str && is_oper(*str) && *str!=term) str++
	ret=from.sub_str(0,str-from)
	less=0
	while ret.strlen() && !ret.is_word("~ ! @ # $ % ^ & * - = + | < > ? / \\ } ] ) . != >= <= += -= /= *= || && << >> => ++ -- ** *** **** |= &= >>= <<= ^^ ... -> == === !== .= .. ||= &&=")
		ret[ret.strlen()-1]='\0'
		less++
	*in=str-1-less
	return ret
}
char* read_upto_word(char** in,char* upto){
	str=*in
	while(*str && !str.str_start(upto)) str++
	from=*in
	if *str
		*in=str+upto.strlen()-1
		return from.sub_str(0,str-from+upto.strlen())
	else
		*in=str-1
		return from.sub_str(0,str-from)
}
char* read_theline(char** in){
	if !in||!*in||!**in => return NULL
	str=*in
	while(*str && !"\n\r".strchr(*str)) str++
	if *str=='\r' && str[1]=='\n' => str++
	from=*in
	*in=str-1
	return from.sub_str(0,str-from)
}
char* read_newline(char** in){
	str=*in
	while(*str && "\n\r".strchr(*str)) str++
	from=*in
	*in=str-1
	return from.sub_str(0,str-from)
}
char* read_space(char** in,char* spaces=" \t"){
	str=*in
	while(*str && spaces.strchr(*str)) str++
	from=*in
	*in=str-1
	return from.sub_str(0,str-from)
}
map* read_data(char** in){
	str=*in
	from=*in
	while *str && !str.str_start("}}")
		str+=str.line_len()
		str+=str.str_level()
	if *str => str+=2
	*in=str-1
	return from.sub_str(0,str-from).data_toks()
}
char* read_heredoc(char** in){
	str=*in
	len=str.line_len()
	hd=str.sub_str(0,len).str_trim()
	from=*in
	lno=0
	str+=len
	tabs=str.str_level()
	str+=tabs
	while *str && !str.str_start(hd)
		len=str.line_len()
		tabs=(str+len).str_level()
		str+=len+tabs
	if *str => str+=hd.str_len()-1
	*in=str
	return from.sub_str(0,str-from+1)
}
char* read_multistr(char** in){
	str=*in
	end=*str
	hd=''
	from=*in
	lno=0
	word_start=''
	str++
	while *str
		if *str=='\\' => if(!hd) str++
		else if *str==end => if(!hd) break
		else if *str=='\n'||*str=='\r'
			if !lno && word_start
				hd=word_start.sub_str(0,str-word_start)
			lno++
			word_start=NULL
		else if *str!=' ' && *str!='\t'
			if !word_start
				word_start=str
				if hd && lno && str.str_start(hd) && str[hd.str_len()]==end
					str+=hd.str_len()
					break
		str++
	*in=str
	return from.sub_str(0,str-from+1)
}
char* read_quote(char** in){
	str=*in
	end=*str
	str++
	while *str
		if *str=='\\' => str++
		else if *str==end => break
		str++
	
	from=*in
	*in=str
	return from.sub_str(0,str-from+1)
}
char* fox_read_symbol(char** in){
	str=*in
	str++
	while *str
		if *str=='\\'
			str+=2
			continue
		if !is_alphanum(*str) => break
		str++
	from=*in
	*in=str-1
	return from.sub_str(0,str-from)
}
map* data_toks(char* in) => in=in.sub_str(2,-2); return [:xmap,NULL,"(",NULL,data_tokenizer(&in),NULL,")"]
map* data_tokenizer(char** in,int level=0){
	if !in||!*in||!**in => return NULL
	str=*in
	mp=[]
	last=''
	space1=''
	space2=''
	map* key=NULL
	map* val=NULL
	while *str
		assert(last!=str)
		last=str

		temp=str
		if str.str_start("//") => space1.=read_theline(&str); str++
		else if " \t\n\r".str_chr(*str) => space1.=read_space(&str,"\t\n\r "); str++
		clevel=0
		for i=space1.str_len()-1; i>=0; i--
			if " \t".str_chr(space1[i]) => clevel++
		if clevel<level
			space1=NULL
			str=temp
			break

		if "\"'`".str_chr(*str) => key=[read_quote(&str)]; str++
		else if *str=='('
			str++
			key=["(",NULL,c_tokenizer(&str,')'),NULL,")"]
			if *str => str++
		else
			key=read_upto(&str,"\n\r \t").data_quote()

		if " \t".str_chr(*str) => space2=read_over(&str,"\t "); str++

		if str.str_start("---") => val=[read_heredoc(&str)]; str++
		else if *str=='-' && " \t\n\r\0".str_chr(str[1]) => val=read_theline(&str).prop_toks(key); str++
		else if !"\n\r".str_chr(*str) => val=read_theline(&str).data_quote(); str++
		
		if key && !val
			temp=str
			ret=data_tokenizer(&str,clevel+1)	
			if ret.map_len()
				val=["xmap",NULL,"(",NULL,ret,NULL,")"]
			else
				val=NULL
	  			str=temp
		if key || val
			if mp.map_len()
				mp[]=NULL
				mp[]=","
			mp[]=space1
			mp.vec_merge(key or [:NULL])
			mp[]=NULL
			mp[]=","
			mp[]=space2
			mp.vec_merge(val or [:NULL])
			space1=space2=NULL
			key=val=NULL
		else
			space1.=space2
			space2=NULL
	if mp.map_len() || space1 => mp[]=space1
	*in=str
	return mp
}
char* read_over(char** in,char* chars=" \t"){
	str=*in
	while(*str && chars.str_chr(*str))
		str++
	from=*in
	*in=str-1
	return from.sub_str(0,str-from)
}
map* prop_vec_toks(char* in){
	ret=[]
	toks=in.split_by(',')
	ret.each val,idx
		if idx => ret.vec_merge([NULL,","," "])
		else ret[]=NULL
		ret.vec_merge(val.data_quote())
	return [:xvec,NULL,"(",NULL,ret,NULL,")"]
}
map* prop_toks(char* in,map* name=NULL){
	ret=[]
	toks=split_by(in,',')
	toks.each val,, idx
		val=val.split_by(' ',2)
		if !val.map_len() => continue
		if idx==0 && val[0]==="-"
			if name
				ret[]=NULL
				ret.vec_merge(:name.data_quote())
				ret.vec_merge([NULL,","," "])
				ret.vec_merge(name)
			val[0]=:type
		if ret.map_len()
			ret.vec_merge([NULL,","," "])
		else
			ret[]=NULL
		ret.vec_merge(val[0].data_quote())
		ret.vec_merge([NULL,","," "])
		ret.vec_merge(val[1] ? val[1].data_quote() : [:NULL])
	return [:xmap,NULL,"(",NULL,ret,NULL,")"]
}
map* read_paren(map* mp,char** line,map*(*func)(char**)){
	str=*line
	mp[]=char_str(*str)
	mp[]=line.func()
	mp[]=closing_paren(*str).char_str()
	return mp
}
map* data_quote(char* in){
	if !in || !in.str_len() => return NULL
	if "\"'`".str_chr(*in) => return [in]
	if *in=='=' => return in.sub_str(1).x_map().vec_del(0,1).vec_compact()
	if *in=='{' => return in.sub_str(1,-1).prop_toks()
	if *in=='[' => return in.sub_str(1,-1).prop_vec_toks()
	return [in.str_quote()]
}
map* c_tokenizer(char** line,char term){
	if !line||!*line||!**line => return NULL
	head=*line
	int headlen=head.str_len()
	expected_end=head+head.str_len()
	str=*line
	mp=[]
	space=''
	int code=0
	last=''
	while *str && *str!=term
		assert(last!=str)
		assert(head.str_len()==headlen)
		last=str
		if str.str_start("//") => read_theline(&str).add_ctok(mp,0)
		else if str.str_start("/*") => read_upto_word(&str,"*/").add_ctok(mp,0)
		else if str.str_start("#") => read_theline(&str).add_ctok(mp,0)
		else if " \t".strchr(*str) => read_space(&str).add_ctok(mp,0)
		else if "\n\r".strchr(*str) => read_newline(&str).add_ctok(mp,0)
		else if "\"`".strchr(*str) => read_quote(&str).add_ctok(mp,1)
		else if *str=='\'' => read_multistr(&str).add_ctok(mp,1)
		else if str.str_start("{{")
			if !(mp->len%2) => mp[]=NULL
			mp.vec_merge(read_data(&str))
		else if str.str_start("---") => read_heredoc(&str).add_ctok(mp,1)
		else if *str==':' => fox_read_symbol(&str).add_ctok(mp,1)
		else if is_oper(*str) => fox_read_oper(&str,term).add_ctok(mp,1)
		else if *str>='0' && *str<='9' => read_num(&str).add_ctok(mp,1)
		else if is_alpha(*str) => read_alpha(&str).add_ctok(mp,1)
		else if "([{".strchr(*str)
			char c=*str
			str++
			c.char_str().add_ctok(mp,1)
			c_tokenizer(&str,c.closing_paren()).add_ctok(mp,1)
			if *str => c.closing_paren().char_str().add_ctok(mp,1)
		else if ','==*str => str.sub_str(0,1).add_ctok(mp,1)
		else if ';'==*str => str.sub_str(0,1).add_ctok(mp,1)
		if *str => str++
	assert(term || str==expected_end)
	*line=str
	return mp
}
static map* add_ctok(void* data,map* mp,int iscode){
	if !data => return mp
	data.assert()
	assert(mp.ptr_type()==Vector)
	int incode=!(mp->len%2)
	if incode && iscode
		mp[]=NULL
		mp[]=data
	else if incode && !iscode => mp[]=data
	else if !incode && !iscode
		if mp->len
			old=mp[mp->len-1].is_str()
			mp->vars[mp->len-1]=old..data
		else mp[]=data
	else if !incode && iscode => mp[]=data
	return mp
}
map* x_map(char* in) => return c_tokenizer(&in,'\0')
int map_has_word(map* mp,char* str){
	mp.each v,,idx => if v===str => return idx+1
	return 0
}
map* toks_split(map* in,char* by,int limit=0){
	ret=in.map_split(by,limit)
	for i=1;i<ret->len;i++ => ret[i-1].toks_align()
	return ret
}
map* toks_align(map* in){
	last=in.map_len()
	if !(last%2) => return in
	if in[last-1]==NULL
		in.vec_del(-1).vec_compact()
	else in[]=NULL
	return in
}
