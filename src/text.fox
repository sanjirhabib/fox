#include <libstemmer.h>
#include "text.h"

char* ucs_str(int* in,int len=0){
	if !len
		while in[len++]
	slen=0
	i=0
	while i<len
		slen+=in[i].unicode_len()
		i++
	ret=slen.new_str()
	ptr=ret
	i=0
	while i<len
		in[i].unicode_utf(ptr)
		ptr+=ptr.str_len()
		i++
	return ret
}
int utf_lang(char* in){
	if !in || !*in => return 0
	if in[0]==-32 => return 1
	if in[0]==-39||in[0]==-40 => return 2
	return 0
}
int is_letter(int code){
	if code>='a' && code<='z' || code>='A' && code<='Z' || code>='0' && code<='9' || code>0x980 && code<0x9F7 || code>=0x620 && code<=0x669
		return 1
	return 0
}
map* str_stem(char* in){
	return in.str_words().words_stem()
}
map* words_stem(map* in){
	in.each val => val.word=val.word.word_stem()	
	return in
}
char* word_stem(char* in){
	lang=in.utf_lang()
	if lang==1 => return in.stem_bangla().bangla_norm()
	if lang==2 => return in.stem_arabic()
	return in.stem_english()
}
char* utf_word_end(char* in){
	while *in
		code=in.utf_unicode()
		if code.is_letter() => in+=in.utf_len(); continue
		if code=='\'' && (in+in.utf_len()).utf_unicode().is_letter() => in+=(in+1).utf_len()+1; continue
		break
	return in
}
char* utf_word_start(char* in){
	while *in && !in.utf_unicode().is_letter() => in+=in.utf_len()
	return in
}
int* ucs_substr(int* in, int from, int upto){
	return in.sub_str(from*sizeof(int),upto*sizeof(int))
}
int ucs_len(int* in){
	return in.str_len()/sizeof(int)
}
int* str_ucs(char* in){
	len=in.str_len()
	int* ret=((in.utf_strlen()+1)*sizeof(int)).new_blob()
	code=0
	i=0
	while (code=in.utf_unicode())
		ret[i++]=code
		in+=in.utf_len()
	ret[i]=0
	return ret
}
map* str_words(char* in){
	start=in
	ret=[]
	if !in => return ret
	while *in
		head=in.utf_word_start()
		if !*head => break
		tail=head.utf_word_end()
		ret[]={{
			word =head.sub_str(0, tail-head)
			from =head-start
			len =tail-head
		}}
		in=tail
	return ret
}
char* stem_arabic(char* in){
	if !_globals.stemmer => _globals.stemmer=:arabic.sb_stemmer_new(:UTF_8)
	return sb_stemmer_stem(_globals.stemmer, in, in.str_len()).str_dup()
}
char* stem_english(char* in){
	if !_globals.stemmer => _globals.stemmer=:english.sb_stemmer_new(:ISO_8859_1)
	return sb_stemmer_stem(_globals.stemmer, in.str_lower(), in.str_len()).str_dup()
}
char* stem_bangla(char* in){
	{{
		েরগুলোর
		েরগুলো
		গুলোর
		গুলো
		েয়েছিলেন া
		.েছিলেন .
		েয়েছিল া
		েছিলেন
		য়েছিল
		েছিল
		চ্ছিলেন
		েরটা
		েরটার
		রছ র
		রব র
		েল
		েলো
		ওয়া
		েয়ে া
		চ্ছিল
		চ্ছিস
		েছেন
		য়েছে
		বেন
		লেন
		দের
		ছিস
		ছিলি
		টির
		টার
		চ্ছি
		চ্ছে
		চ্ছ
		েছ
		েছে
		ের
		ার
		েন
		তো
		কে
		তে
		রা
		িস
		ছি
		ছে
		লি
		বি
		টি
		টা
		য়ে
//		.ে .
		ে
		ই
		য়
		ও

	}}.each val, key
		if val==="."
			key=key+1
			if in.str_end(key) && in.sub_str(-key.str_len()-6,3)==="ে"
				return in.sub_str(0,-key.str_len()-6).."া"..in.sub_str(-key.str_len()-3,3)
			continue
		if in.str_end(key)
			return in.sub_str(0, -key.str_len())..val
	return in
}
int stem_test(){
	errs=0
	"banglatest.txt".file_read().str_split("\n").each line
		mp=line.str_split(" ")
		key=mp[0]
		val=mp[1]
		if key.stem_bangla()!==val
			"$key!=$(key.stem_bangla()) -- correct is $val".px()
			errs++
		else
			"ok $key=$(key.stem_bangla())\r".px(0)
	NULL.px()
	:done.px()
	return errs
}
char* bangla_norm(char* in){
	return in.str_replace({{
		ী ি
		ূ ু
		ঁ
		শ স
		ষ স
		ণ ন
		ঙ ং
		ঃ
		ব় র
		ড় ড়
		য় য়
		ঢ় ঢ়
		্ব
		্রি ৃ
		্রী ৃ
		অা আ
		ৎ ত
	}})
}

fts5_tokenizer xtokenizer={0};
int xTokenize(Fts5Tokenizer* unused1, void *pCtx, int flags, const char *pText, int nText, void* callback){
	int (*xToken)(void *, int, const char *, int, int, int)=callback
	pText.sub_str(0,nText).str_words().words_stem().each val
		xToken(pCtx, 0, val.word, val.word.str_len(), val.from.is_int(), val.from.is_int()+val.len.to_int())
		lang=val.word.utf_lang()
		if lang==1
			phonetic=val.word.bangla_english()
			xToken(pCtx, FTS5_TOKEN_COLOCATED, phonetic, phonetic.str_len(), val.from.is_int(), val.from.is_int()+val.len.to_int())
			sound=phonetic.soundex()
			xToken(pCtx, FTS5_TOKEN_COLOCATED, sound, sound.str_len(), val.from.is_int(), val.from.is_int()+val.len.to_int())
		else if !lang
			sound=val.word.soundex()
			xToken(pCtx, FTS5_TOKEN_COLOCATED, sound, sound.str_len(), val.from.is_int(), val.from.is_int()+val.len.to_int())
		
	return SQLITE_OK
}
int xCreate(void* unused, const char **azArg, int nArg, Fts5Tokenizer **ppOut){
	*ppOut=1
	return SQLITE_OK
}
static int xDelete(Fts5Tokenizer* unused){
	return SQLITE_OK
}

char* db_init_tokenizer(char* db){
	conn=db.lite_conn()
	fts5_api *pRet=''
	sqlite3_stmt *pStmt=''
	if( SQLITE_OK==sqlite3_prepare(conn, "SELECT fts5(?1)", -1, &pStmt, 0) ){
		sqlite3_bind_pointer(pStmt, 1, (void*)&pRet, "fts5_api_ptr", NULL)
		sqlite3_step(pStmt)
	}
	sqlite3_finalize(pStmt)
	xtokenizer.xCreate=xCreate
	xtokenizer.xDelete=xDelete
	xtokenizer.xTokenize=xTokenize
	pRet->xCreateTokenizer(pRet, :habib, NULL, &xtokenizer, NULL)
	return db;
}
map* bangla_joins(){
	return "ক্ক ক্ট ক্ট্র ক্ত ক্ত্র ক্ব ক্ম ক্য ক্র ক্ল ক্ষ ক্ষ্ণ ক্ষ্ব ক্ষ্ম ক্ষ্ম্য ক্ষ্য ক্স খ্য খ্র গ্‌ণ গ্ধ গ্ধ্য গ্ধ্র গ্ন গ্ন্য গ্ব গ্ম গ্য গ্র গ্র্য গ্ল ঘ্ন ঘ্য ঘ্র ঙ্ক ঙ্‌ক্ত ঙ্ক্য ঙ্ক্ষ ঙ্খ ঙ্গ ঙ্গ্য ঙ্ঘ ঙ্ঘ্য ঙ্ঘ্র ঙ্ম চ্চ চ্ছ চ্ছ্ব চ্ছ্র চ্ঞ চ্ব চ্য জ্জ জ্জ্ব জ্ঝ জ্ঞ জ্ব জ্য জ্র ঞ্চ ঞ্ছ ঞ্জ ঞ্ঝ ট্ট ট্ব ট্ম ট্য ট্র ড্ড ড্ব ড্য ড্র ড়্গ ঢ্য ঢ্র ণ্ট ণ্ঠ ণ্ঠ্য ণ্ড ণ্ড্য ণ্ড্র ণ্ঢ ণ্ণ ণ্ব ণ্ম ণ্য ৎক ত্ত ত্ত্ব ত্ত্য ত্থ ত্ন ত্ব ত্ম ত্ম্য ত্য ত্র ত্র্য ৎল ৎস থ্ব থ্য থ্র দ্গ দ্ঘ দ্দ দ্দ্ব দ্ধ দ্ব দ্ভ দ্ভ্র দ্ম দ্য দ্র দ্র্য ধ্ন ধ্ব ধ্ম ধ্য ধ্র ন্ট ন্ট্র ন্ঠ ন্ড ন্ড্র ন্ত ন্ত্ব ন্ত্য ন্ত্র ন্ত্র্য ন্থ ন্থ্র ন্দ ন্দ্য ন্দ্ব ন্দ্র ন্ধ ন্ধ্য ন্ধ্র ন্ন ন্ব ন্ম ন্য প্ট প্ত প্ন প্প প্য প্র প্র্য প্ল প্স ফ্র ফ্ল ব্জ ব্দ ব্ধ ব্ব ব্য ব্র ব্ল ভ্ব ভ্য ভ্র ম্ন ম্প ম্প্র ম্ফ ম্ব ম্ব্র ম্ভ ম্ভ্র ম্ম ম্য ম্র ম্ল য্য র্ক র্ক্য র্গ্য র্ঘ্য র্চ্য র্জ্য র্ণ্য র্ত্য র্থ্য র্ব্য র্ম্য র্শ্য র্ষ্য র্হ্য র্খ র্গ র্গ্র র্ঘ র্চ র্ছ র্জ র্ঝ র্ট র্ড র্ণ র্ত র্ত্র র্থ র্দ র্দ্ব র্দ্র র্ধ র্ধ্ব র্ন র্প র্ফ র্ভ র্ম র্য র্ল র্শ র্শ্ব র্ষ র্স র্হ র্ঢ্য ল্ক ল্ক্য ল্গ ল্ট ল্ড ল্প ল্‌ফ ল্ব ল্‌ভ ল্ম ল্য ল্ল শ্চ শ্ছ শ্ন শ্ব শ্ম শ্য শ্র শ্ল ষ্ক ষ্ক্র ষ্ট ষ্ট্য ষ্ট্র ষ্ঠ ষ্ঠ্য ষ্ণ ষ্প ষ্প্র ষ্ফ ষ্ব ষ্ম ষ্য স্ক স্ক্র স্খ স্ট স্ট্র স্ত স্ত্ব স্ত্য স্ত্র স্থ স্থ্য স্ন স্প স্প্র স্প্‌ল স্ফ স্ব স্ম স্য স্র স্ল হ্ণ হ্ন হ্ব হ্ম হ্য হ্র হ্ল হৃ".str_split(" ")
}
map* bangla_english(char* in){
	letters={{	
		ক k
		খ kh
		গ g
		ঘ gh
		ঙ ng
		চ c
		ছ ch
		জ j
		ঝ jh
		ট t
		ঠ th
		ড d
		ঢ dh
		ণ n
		ত t
		থ th
		দ d
		ধ dh
		ন n
		প p
		ফ f
		ব b
		ভ v
		ম m
		য j
		র r
		ল l
		শ sh
		ষ sh
		স sh
		হ h
		ড় r
		ঢ় r
		য় y
		ৎ   t
		ং   ng
		া a
		ি i
		ী i
		ু u
		ূ u
		ৃ ri
		ে e
		ৈ oi
		ো o
		ৌ ou
		অ a
		আ a
		ই i
		ঈ i
		উ u
		ঊ u
		ঋ r
		এ e
		ঐ oi
		ও o
		ঔ ou
		১ 1
		২ 2
		৩ 3
		৪ 4
		৫ 5
		৬ 6
		৭ 7
		৮ 8
		৯ 9
		০ 0

	}}
	char letter[4]
	ret=''
	while in.utf_letter(letter)
		ret.=letters[letter]
		in+=letter.strlen()
	return ret
}
char* soundex(char *s) {
	static const char *cls[] = { "AEIOU", "", "BFPV", "CGJKQSXZ", "DT", "L", "MN", "R", 0}
	static char code[128] = {0}
	if !code[80]
		for int i = 0; cls[i]; i++
			char* s=cls[i]
			int c=i-1
			while *s
				code[(int)*s] = code[0x20 ^ (int)*s] = c
				s++

	static char out[5]
	int c
	int prev
	int i

	out[0] = out[4] = 0
	if !s || !*s => return ''

	out[0] = *s++

	prev = code[(int)out[0]];
	for i = 1; *s && i < 4; s++
		if (c = code[(int)*s]) == prev => continue

		if c == -1 => prev = 0
		else if c > 0
			out[i++] = c + '0'
			prev = c;
	while i < 4 => out[i++] = '0'
	return out.str_dup()
}
