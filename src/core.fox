#line 2 "src/core.fox"

#ifndef _XOPEN_SOURCE
#define _XOPEN_SOURCE
#endif
#ifndef _GNU_SOURCE
#define _GNU_SOURCE
#endif
#include <setjmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <stdarg.h>
#include <math.h>
#include <time.h>
#include <sys/time.h>
#include <memory.h>
#include <unistd.h>
#include <ctype.h>
#include <sys/types.h>
#include <execinfo.h>
#include <signal.h>
#include <sys/mman.h>

#include <core.h>
enum Types {
	Null,Int,Double,String,Blob,Map,Vector,Index,Keys,Cell,Cell2,Tail
};
typedef struct Mapcell {
	int nextid;
	int hkey;
	char* id;
	void* val;
} Mapcell;
typedef struct map {
	int len;
	char type;
	unsigned short magic;
	union {
		struct Mapcell* pairs;
		void** vars;
	};
} map;

#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#if UINTPTR_MAX == 0xffffffff
typedef long long void*;
#else
typedef void* var;
#endif
#define is_i(x) ((long long)(x)>>61 & 2)
#define is_f(x) ((*(long long*)&(x))>>61 & 1)
#define is_num(x) (is_i(x)||is_f(x))

extern map* _globals;

extern int _printed;
extern int _is_web;

extern char* skip;
extern int _queries;
int _queries;

#define None 0x0F9AD3BA
#define End (char*)(0x0FF1B14E059AD3BA)

char* strstr(const char* str1,const char* str2);
int chdir(const char* path);
int max_mem();
int curr_mem();
// ^^^ habib upto

char* strstr(const char* str1,const char* str2);
int chdir(const char* path);
int max_mem();
int curr_mem();
int run(map* args);
#include <gc.h>
//#include <map.h>
#include <generator.h>

#define MAXMEM 40*1024*1024
#define MIN_CHAIN 1

map* _globals=NULL;

int _printed=0;

char* skip=NULL;

int rand();
void* px(void* str,int newline=1);
void xexit(int val=0);
void* fox_error(char* msg,int dump=0);
static void fox_signal_handler(int sig) => fox_stack_dump()
void stack_dump_direct(){
	void* array[400]
	size_t size=array.backtrace(400)
	array.backtrace_symbols_fd(size,STDERR_FILENO)
	return 0
//	assert(0)
}
char* stack_str(){
	void* array[400]
	size_t size=array.backtrace(400)
	char** lines=array.backtrace_symbols(size)
	ret=''
	for i=0; i<size; i++
		if lines[i].strstr(" stack_str ") || lines[i].strstr(".dylib ") || lines[i].strstr(" fox_error ") || lines[i].strstr(" start ") || lines[i].strstr(" 0x0 ") || lines[i].strstr(" main ") => continue
		part=lines[i].sub_str("3|||index.cgi|||||||||||||||||||||||||||0x0000000109c950d8|".str_len())
		part=part.sub_str(0,part.strchr(' ')-part)
		ret.=" -- "..part.."()"
//		lines[i].printf("%s\n")
	return ret
}
void fox_stack_dump() => fox_error("Error:",1)
size_t blob_size(char* in){
	if !in => return 0
	char* head=in.ptr_head()
	return *(size_t*)head-(in-head-8)
}
int str_len(char* str){
	if !str => return 0
	int type=str.ptr_type()
	if type==Blob => return str.blob_size()
	if type==String => return str.strlen()
	return 0
}
char* new_blob(int size=0){
	char* ret=fox_alloc(size+8+1,Blob)
	*(size_t*)ret=size
	ret+=sizeof(size_t)
	assert(ret.str_len()==size)
	assert(!ret[size])
	return ret
}
char* blob_dup(char* str, int len){
	if !str||!len => return NULL
	return new_blob(len).memcpy(str,len)
}
char* str_dup_len(char* str, int len){
	if !str => return NULL
	ret=str.is_blob() ? len.new_blob() : len.new_str()
	return ret.memcpy(str,len)
}
char* str_dup(char* str) => return str.str_dup_len(str.str_len())
char* sub_str(char* src,int from,int len=-2147483648){
	if !len => return NULL //fox_stack_dump()
	if len==-2147483648 => len=0
	int slen=src.str_len()
	if !slen => return ""
	if from < 0 => from+=slen
	if len<=0 => len+=slen-from
	if len<=0 => return NULL
	if from>=slen => return NULL
	if from+len>=slen => return (src+from).str_dup()
	return (src+from).str_dup_len(len)
}
char* print(char* str,FILE* fp=stdout){
	_printed=1
	int ret=fwrite(str.null_str(),1,str.null_str().str_len(),fp)
	assert(ret==str.null_str().str_len())
	return str
}
char* str_times(char* str,int times){
	if times<=0 => return NULL
	char* ret=new_str(str.strlen()*times)
	while(times--) ret.=str
	return ret
}
char* xstr(char* ret, char* ...){
	ret=ret.str_dup()
	va_list args
	args.va_start(ret)
	while 1
		char* str=args.va_arg(char*)
		if str==End => break
		ret.=str
	args.va_end()
	return ret
}
char* xcat(char* ret, char* ...){
	va_list args
	args.va_start(ret)
	while 1
		char* str=args.va_arg(char*)
		if str==End => break
		ret=ret.cat(str.to_str())
	args.va_end()
	return ret
}
char* blob_cat(char* str1,char* str2,size_t len=-1020){
	assert((!str1 || str1.is_str()) && (!str2 || str2.is_str()))
	if !str2 => return str1
	if len==-1020 => len=str2.str_len()
	if !str1 => return str2.str_dup_len(len)
	oldlen=str1.str_len()
	if !str1.is_blob()
		ret=new_blob(oldlen+len)
		ret.memcpy(str1,oldlen)
		(ret+oldlen).memcpy(str2,len)
		ret[oldlen+len]='\0'
		assert(ret.str_len()==oldlen+len)
		return ret
	else
		char temp1[128];
		char temp2[128];
		char temp3[128];
		temp=str1.fox_realloc(str1.str_len()+len+1,str1.ptr_type())
//		"blob_cat %s + %s = %s\n".printf(str1.ptr_name(temp1), str2.ptr_name(temp2), temp.ptr_name(temp3))
		assert(oldlen==temp.str_len())
		str1=temp
		(str1+str1.str_len()).memcpy(str2,len)
		if str1.ptr_type()==Blob
			char* head=str1.ptr_head()
			*(size_t*)(head)+=len
		assert(oldlen+len==str1.str_len())
		assert(!str1[str1.str_len()])
	return str1
}
extern char tempbuff[128];
char* cat(char* str1,char* str2,size_t len=-1020){
//	return str1.blob_cat(str2,len)
	assert((!str1 || str1.is_str()) && (!str2 || str2.is_str()))
	if !str2 => return str1
	if len==-1020 => len=str2.str_len()
	if !str1 => return str2.str_dup_len(len)
	oldlen=str1.str_len()
	if oldlen+len>16 || str1.is_blob() || str2.is_blob() => return str1.blob_cat(str2,len)
	str1=str1.fox_realloc(str1.str_len()+len+1,str1.ptr_type())
	assert(oldlen==str1.str_len())
	(str1+str1.str_len()).memcpy(str2,len)
	if str1.ptr_type()==Blob => *(size_t*)(str1-8)+=len
	assert(oldlen+len==str1.str_len())
	assert(!str1[str1.str_len()])
	return str1
}
static char* vec_json(map* mp,int indent=0){
	if !mp => return "[]"
	if !mp.is_vec() => return mp.json(indent)
	char* ret=NULL
	ret.="["
	last=mp.map_len()
	mp.each v,,i
		if !v => ret.=:null
		else if v.is_str() => ret.=v.str_quote()
		else if v.is_num() => ret.=v
		else if v.is_map() => ret.=v.is_map().vec_json(indent ? indent+1 : 0)
		if i<last-1 => ret.=", "
	ret.="]"
	return ret
}
char* json(map* mp,int indent=0){
	if !mp.is_map() => return NULL
	if !mp.map_len() => return "{}"
	if mp.is_vec() => return mp.vec_json(indent)
	char* ret=NULL
	ret.="{"
	mp.each v,k,i
		if indent => ret=ret.xcat("\n","\t".str_times(indent-1))
		if k.is_i() => ret.=(k.is_int()-1).int_str()
		else if k.is_f() => ret.=k
		else ret.=k.is_str().str_quote()
		ret.=":"
		if v.is_str() => ret.=v.is_str().str_quote()
		else if !v => ret.=:null
		else if v.is_map() => ret.=v.is_map().json(indent ? indent+1 : 0)
		else ret.=v
		if i<mp->len-1 => ret.=", "
		
	if ret.str_len()>1 && indent => ret=ret.xcat("\n","\t".str_times(indent-2))
	ret.="}"
	return ret
}
char* to_str(void* v,char* null="",int human=0){
	if !v => return NULL
	else if v.is_str() => return v
	else if v.is_i() => return v.is_int().int_str()
	else if v.is_f() => return v.is_double().double_str()
	else if v.is_map() => return v.json(human)
	else return ""
}
char* str_quote(char* head){
	if !head => return "\"\""
	len=head.str_len()
	extra=0
	char c
	char* str=head
	char* quotable="\\\"\n\r\t"
	char* quoteto="\\\"nrt"
	while((c=*str++)) if quotable.strchr(c) => extra++
	assert(extra<=len)
	char* ret=new_str(head.str_len()+extra+2)
	ret[0]='"'
	str=head
	i=1
	char* fox_at
	while((c=*str++))
		if !(fox_at=quotable.strchr(c)) => ret[i++]=c; continue
		ret[i++]='\\'
		ret[i++]=quoteto[fox_at-quotable]
		assert(i<len+extra+2)
	
	ret[i]='"'
	assert(!ret[i+1])
	return ret
}
char* double_str(double val){
	char ret[21]={0}
	ret.sprintf("%.14g",val)
	return ret.str_dup()
}
char* int_str(long long value){
	neg=0
	if value<0
		value*=-1
		neg=1
	char string[21]={0}
	string_l=1+neg
	x=10
	while x<=value
		x*=10
		string_l++
	//int string_l=(value == 0) ? 1 : (int)value.log10() + 1 + neg
	residual=value
	it=0
	for it=string_l-1;it>=0;it--
		int digit
		digit=residual % 10
		residual=residual / 10
		string[it]='0' + digit
	
	string[string_l]='\0'
	if neg => string[0]='-'
	return string.str_dup()
}
int str_eq(char* str,char* str1){
	len1=str.str_len()
	len2=str1.str_len()
	if !len1 && !len2 => return 1
	if len1!=len2 => return 0
//	if !str && !str1 => return 1
//	if !str || !str1 => return 0
	return str.strcmp(str1) ? 0 : 1
}
size_t str_hash(unsigned char *str){
	int c
	size_t ret = 5381
	while((c=*str++)) ret=((ret<<5)+ret)+c
	return ret ? ret : 0x08db1118c533c700; //don't return 0
}
map* xvec(void* v1=End, void* ...){
	mp=[]
	if v1==End => return mp
	mp[]=v1
	va_list args
	args.va_start(v1)
	while 1
		void* v=args.va_arg(void*)
		if v==End => break
		mp[]=v
	args.va_end()
	return mp
}
map* xmap(char* k1=End, void* ...){
	mp={}
	if k1==End => return mp
	va_list args
	args.va_start(k1)
	void* v=NULL
	void* k=k1
	while 1
		v=args.va_arg(void*)
		if v==End => "Value for key $k not provided in xmap".fox_error()
		mp[k]=v
		k=args.va_arg(char*)
		if !k || k==End => break
	args.va_end()
	return mp
}
char* new_str(int len) => return fox_alloc(len+1,String)
map* new_map(){
	map* ret=map.sizeof().fox_alloc(Map)
	ret->type=Map
	ret->magic=0xD41E
	return ret
}
map* new_vec(){
	map* ret=map.sizeof().fox_alloc(Vector)
	ret->type=Vector
	ret->magic=0xD41E
	return ret
}
int key_eq(map* mp,int idx,char* id){
	id.assert()
	assert(idx>=0 && idx<mp->len)
	char* key=mp.map_key(idx)
	if key.is_str() => return key===id.is_str()
	return id==key
}
int key_hash(char* id) => return id.is_str() ? str_hash((unsigned char*)id) : id.is_int()
int map_hash(map* mp, char* id){
	hash=id.key_hash()
	hash=hash & (mp.map_size()-1)
	return hash
}
int map_idx(map* mp,char* id){
	return mp.map_has_key(id)
}
int map_has_key(map* mp,char* id){
	if !id||!mp => return 0
//	assert(mp.is_map())
	if !mp->len => return 0
	if mp.ptr_type()==Vector
		if id.is_str() => return 0
		idx=id.is_int()
		if idx<1||idx>mp->len => return 0
		return idx
	
	hash=id.key_hash()
	hash=hash & (mp.map_size()-1)
	int idx=mp->pairs[hash].hkey
	while idx>0
		if mp.key_eq(idx-1,id) => return idx
		idx=mp->pairs[idx-1].nextid
//		"loop ".px(0)
//		idx.px()
	return 0
}
map* vec_realloc(map* mp,int extra){
	size=mp.map_size()
	int req=mp->len+extra
	if req<=size => return mp
	if !size => size=2
	while(size<req) size*=2
	mp->vars=fox_realloc((char*)mp->vars,size*sizeof(void*),Cell)
	return mp
}
map* vec_add(map* mp,void* v){
	if !mp => return mp
	if mp->type!=Vector => return mp.add(NULL,v)
	mp.vec_realloc(1)
	mp->len++
	mp->vars[mp->len-1]=v
	return mp
}
map* set(map* mp,int idx,void* val){
	if idx<0 => return mp
	if mp.ptr_type()==Map => mp->pairs[idx].val=val
	else mp.vec_set(idx+1,val)
	return mp
}
long long is_int(void* v){
	if !v.is_i() => return 0
	size_t val=((size_t)v >> 63) & 1 ? 3 : 0;
	return (long long)((((size_t)v) & ~(3ll<<61)) | ((val & 3ll)<<61))
}
double is_double(void* v){
	if !v.is_f() => return v.is_int()
	size_t val=(((size_t)v) >> 60) & 1 ? 1 : 2;
	val=(size_t)((((size_t)v) & ~(3ll<<61)) | ((val & 3ll)<<61))
	return *(double*)&val;
}
void* int_var(size_t i){
	return (void*)((i & ~(3ll<<61)) | ((2ll & 3ll)<<61));
}
void* double_var(double f){
	return (void*)(((*(size_t*)&f) & ~(3ll<<61)) | ((1ll & 3ll)<<61))
}
int has_id(map* mp,int idx){
	if !mp.is_map() => return 0
	return idx>=0 && idx<mp->len
}
void* map_idp(map* mp,int idx){
	if !mp => return NULL
//	if !mp.is_map() => ("Error! not map "..mp.to_str().str_quote()).px(); assert(0)
//	assert(mp.is_map())
	if idx<0 || idx>=mp->len => return NULL
	return mp->type==Vector ? &mp->vars[idx] : &mp->pairs[idx].val
}
void* map_id(map* mp,int idx){
	if !mp.is_map() => return NULL
//	if !mp.is_map() => ("Error! not map "..mp.to_str().str_quote()).px(); assert(0)
//	assert(mp.is_map())
	if idx<0 || idx>=mp->len => return NULL
	return mp->type==Vector ? mp->vars[idx] : mp->pairs[idx].val
}
int map_len(map* mp){
	if !mp => return 0
//	assert(mp.is_map())
	return mp->len
}
char* map_key(map* mp,int idx)	=> return idx<0 ? NULL : (mp.ptr_type()==Map ? mp->pairs[idx].id : (idx+1).int_var())
char* is_str(void* v){
	if !v || v.is_num() => return NULL
	type=ptr_type(v);
	return type==String || type==Blob ? v : NULL
}
char* is_blob(void* v)	=> return ptr_type(v)==Blob ? v: NULL
map* is_vec(void* v)			=> return ptr_type(v)==Vector ? v: NULL
map* is_hash(void* v)			=> return ptr_type(v)==Map ? v: NULL
map* is_map(void* v){
//	return v.is_ptr() && ((map*)v)->magic==0xD41E ? v : NULL
	return ptr_type(v)>=Map ? v: NULL
}
double str_double(char* v){
	ret=0.0
	if !v => return ret
	sscanf(v,"%lf",&ret)
	return ret
}
double to_double(void* v){
	if v.is_str() => return v.str_double()
	return v.is_double()
}
long long str_int(char* v){
	if !v || !*v => return 0
	long long ret=0
	sscanf(v,"%lld",&ret)
	return ret
}
long long to_int(void* v){
	if v.is_str() => return v.str_int()
	return v.is_int()
}
int next(map* mp,int idx,char** key=NULL,void** val=NULL){
	idx++
	if !mp||idx>=mp->len => return -1
	while idx<mp->len && mp[idx]==(char*)&skip => idx++
	if idx>=mp->len => return -1
	if key => *key=mp.map_key(idx)
	if val => *val=mp[idx]
	return idx
}
int stoi(char* str){
	if !str => return 0
	return atoi(str)
}
map* globals() => return _globals
int map_size(map* mp){
	if !mp => return 0
	return ceil_pow2(mp->len)
}
int ceil_pow2(int i){
	if !i => return 0
	i--
	int ret=2
	while(i>>=1) ret<<=1
	return ret
}
map* add(map* mp,void* k,void* v) => return mp->type==Vector ? mp.vec_set(k.is_int(),v) : mp.map_add(k,v)
map* vec_set(map* mp,int idx,void* v){//1 based
	if !mp => return mp
	if mp->type!=Vector => return mp.add(idx.int_var(),v)
	if idx>0 && idx<=mp->len => mp->vars[idx-1]=v; return mp
	if idx<1 => return mp.vec_add(v)
	diff=idx-mp->len
	while diff>1
		mp.vec_add(NULL)
		diff--
	return mp.vec_add(v)
}
map* map_add(map* mp,char* key,void* v){
	if !mp => return mp
	assert(mp.ptr_type()==Map)
	int idx=mp.map_has_key(key)
	if idx
		mp->pairs[idx-1].val=v
//		"map old key: %s\n".printf(key)	
		return mp
//	"map new key: %s\n".printf(key)	
	int reindex=0
	if mp->len>=mp.map_size()
		mp->pairs=mp.map_size() ? fox_realloc((char*)mp->pairs,2*mp.map_size()*Mapcell.sizeof(),Cell2)
			: fox_alloc(2*Mapcell.sizeof(),Cell2)
//		"map realloc for key:%s\n".printf(key)
		reindex=1
	
	mp->pairs[mp->len].val=v
	mp->pairs[mp->len].id=key
	mp->pairs[mp->len].nextid=-1
	mp->len++
	reindex ? mp.map_reindex() : mp.map_index(mp->len-1)
	return mp
}
static int map_nextno(map* mp){
	for int i=mp->len-1; i>=0; i--
		if mp->pairs[i].id.is_i() => return mp->pairs[i].id.is_int()
	return 0
}
map* map_index(map* mp,int idx){
	if !mp => return mp
	assert(idx>=0 && idx<mp->len)
	mp->pairs[idx].nextid=-1
	char* id=mp->pairs[idx].id
	if !id => mp->pairs[idx].id=(mp.map_nextno()+1).int_var()
	int i=key_hash(mp->pairs[idx].id)
	i=i & (mp.map_size()-1)
	if !mp->pairs[i].hkey => mp->pairs[i].hkey=idx+1
	else
		i=mp->pairs[i].hkey
		assert(i>0 && i<=mp->len)
		while mp->pairs[i-1].nextid>0
			i=mp->pairs[i-1].nextid
			if i==idx+1 => assert(0)
		mp->pairs[i-1].nextid=idx+1
	return mp
}
map* map_reindex(map* mp){
	if !mp => return mp
	for int i=0;i<mp.map_size();i++
		mp->pairs[i].nextid=mp->pairs[i].nextid ? -1 : 0
		mp->pairs[i].hkey=0
	
	mp.each ,,i => mp.map_index(i)
	return mp
}
char* null_str(char* in) => return in ? in : ""
map* ptrs_vec(void** ptrs,int len){
	ret=[]
	ret->len=len
	ret->vars=ptrs
	return ret
}
int exec(char* cmd,char** output=NULL){
	FILE* fp
	char buff[2048]
	buff[sizeof(buff)-1]='\0'
	fp=cmd.popen(:r)
	if !fp => "Failed to run $cmd".fox_error(); return -1
	char* ret=NULL
	while buff.fgets(buff.sizeof()-1,fp) => !output ? buff.px(0) : (ret.=buff)
	int status=fp.pclose()
	status=status.WEXITSTATUS()
	if output => *output=ret
	return status
}
void init_rand() => srand(NULL.time()*2817635252)
void* map_val(map* mp,char* key){
//	if !mp||!key => return NULL
	if !mp||!key||!mp.is_map() => return NULL
//	assert(mp.ptr_type()==Map)
	i=mp.map_has_key(key)
	return i ? mp->pairs[i-1].val : NULL
}
extern char **environ;
map* env_vars(){
	if _globals.env => return _globals.env
	ret={}
	for char **env=environ;*env;++env
		mp=str_split(*env,"=",2)
		ret[mp[0]]=mp[1]
	_globals.env=ret
	return ret
}
map* argv_map(char** argv,int argc){
	init_gc((void**)argv)
	_globals={}
	SIGSEGV.signal(fox_signal_handler)
	SIGABRT.signal(fox_signal_handler)
	init_rand()
	ret=[]
	ret->len=argc
	ret->vars=(void**)argv
	_globals.args=ret
	return ret
}
map* str_split(char* str,char* by,int limit=0){
	if !str => return NULL
	ret=[]
	head=str
	end=''
	int found=0
	while (end=head.str_has(by))
		ret[]=head.sub_str(0,end-head)
		head=end+by.str_len()
		if limit && ++found==limit-1 => break
	
	ret[]=head.str_dup() //head.str_dup()
	return ret
}
char* str_has(char* str,char* sub){
	if !str||!sub||!str.is_str() => return NULL
	return str.strstr(sub)
}
char* exec_str(char* in) => ret=''; in.exec(&ret); return ret
int main(int argc, char** argv){
	return argv.argv_map(argc).run()
}
