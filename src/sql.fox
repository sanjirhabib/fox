#line 2 "src/sql.fox"

#include <libstemmer.h>
#include <core.h>
#include <sql.h>
#include <unicode.h>
#include <sqlite3.h>
#include <playground.h>
//#include <foxparser.h>
#include <dir.h>

#pragma fox cc -lsqlite3

int _queries=0;

char* str_code(char* in){
	in=in.to_str()
	len=in.str_len()
	if !len => return :_blank;
	char ret[65]={0}
	if len>64 => len=64
	for i=0; i<len && i<64; i++
		if in[i]>='A' &&  in[i]<='Z' => ret[i]=in[i]+'a'-'A'
		else if !in[i].is_alphanum() => ret[i]='_'
		else ret[i]=in[i]
	ret[len]='\0'
	if !ret[0].is_alpha() => return "_$ret"
	return ret.str_dup()
}
void* sql_value(char* sql,char* db,map* param=NULL) => return sql.lite_exec(db,param)[0][0]
map* sql_rows(char* sql,char* db,map* param=NULL){
	if !sql.strchr(' ') => sql="select * from $sql"
	return sql.lite_exec(db,param)
}
map* sql_row(char* sql,char* db,map* param=NULL) => return sql.lite_exec(db,param)[0]
map* sql_vector(char* sql,char* db,map* param=NULL){
	ret=[]
	sql.lite_exec(db,param).each v,,i
		ret[]=v[0]
	return ret
}
map* sql_pairs(char* sql,char* db,map* param=NULL){
	ret={}
	sql.lite_exec(db,param).each v,,i
		ret[v[0]]=v.map_len()>1 ? v[1] : v[0]
	return ret
}
map* sql_vec(char* sql,char* db,map* param=NULL){
	ret=[]
	sql.lite_exec(db,param).each v,,i
		ret[]=v[0]
	return ret
}
char* sql_drop(char* tbl){
	return "drop table if exists $tbl"
}
void* sql_error(char* sql,char* db,sqlite3* conn){
	msg="$((char*)conn.sqlite3_errmsg()) $db/$sql"
	conn.sqlite3_close_v2()
	return msg.fox_error()
}
map* sqls_exec(map* sqls,char* db){
	sqls.each sql=> sql.lite_exec(db)
	return sqls
}
map* parse_connection(char* in) => return {type: :lite, file: in}
map* conn_db(char* db){
	if !db.is_code() => return db.parse_connection()
	ret=_globals.dbs[db]
	if !ret => "SQLite connection $db not found. Only $(_globals.dbs.map_keys().map_join(\",\")) defined".fox_error()
	if ret.is_str() => _globals.dbs[db]=ret.parse_connection()
	return _globals.dbs[db]
}
map* sql_exec(char* sql,char* db,map* params=NULL) => return sql.lite_exec(db,params)
void* lite_conn(char* db){
	cname=db
	db=db.conn_db().file
	if !db => "query() connection $(cname.str_quote()) not found $(_globals.dbs)".fox_error()
	if !_globals.conn[db]
		sqlite3* conn=_globals.conn[db]
		if db.sqlite3_open_v2(&conn,SQLITE_OPEN_READWRITE|SQLITE_OPEN_URI,NULL)!=SQLITE_OK
			return NULL.sql_error(db,conn)
		_globals.conn[db]=conn
	return _globals.conn[db]
}
map* lite_exec(char* sql,char* db,map* params=NULL){
	_queries++
	sqlite3* conn=db.lite_conn()
	sqlite3_stmt* stm=NULL
//	start_time()
	if conn.sqlite3_prepare_v2(sql,-1,&stm,NULL)!=SQLITE_OK
		return sql.sql_error(db,conn)
	int i=0
	params.each v,k,idx
		assert(k.is_str())
		if (i=stm.sqlite3_bind_parameter_index(":"..k))
			stm.sqlite3_bind_text(i,v.to_str(),-1,NULL)
	int ncols=stm.sqlite3_column_count()
	map* cols=NULL
	if ncols
		cols=[]
		for int i=0;i<ncols;i++ => cols[]=str_dup((char*) stm.sqlite3_column_name(i))
	map* ret=NULL
	while (i=stm.sqlite3_step())
		if i==SQLITE_ROW
			if !ret => ret=[]
			row={}
			for(int i=0;i<ncols;i++) row[cols[i]]=str_dup((char*)stm.sqlite3_column_text(i))
			ret[]=row
		else if i==SQLITE_BUSY => continue
		else if i==SQLITE_DONE => break
		else return sql.sql_error(db,conn)
	if stm.sqlite3_finalize()!=SQLITE_OK => return sql.sql_error(db,conn)
//	end_time()
	return ret
}
void close_conns(){
	_globals.conn.each val,key
		_globals.conn[key]=NULL
		if !val => continue
		val.sqlite3_close_v2()
}
