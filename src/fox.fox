#line 2 "/web/fox/fox.fox"
/*
NOTE:
	Haven't used LLVM. That would force the whole application to be JITed.
BUGS:
	Dec-2017
	"'$k'=" doesn't compile correctly.
	a[hello][world] bug
	Dec-2017
	---; <-- requires ending semicolon.
TODO:
	eval case:
	eval << >>
CONSIDER:
	sym(char*);
*/
#include <fox.h>

#ifdef PHP_MOD
#undef assert
#define assert(x) if(!(x)){ fox_error("Assert failed!",1); }
#endif


void cache_blast(char* type){
	_globals.cache[type]={}
}
void* cache(void* key,char* type,void* out=NULL){
	if key.is_str() => key=str_hash((unsigned char*)key).int_var()
	else if !key => key=int_var(0)
	if !out
		return _globals.cache[type][key]
	if !_globals.cache[type].map_has_key(key) => _globals.cache[type][key]=NULL; return out
	_globals.cache[type][key]=out
	return out
}
void gotoxy(int x,int y){
	_printed=1
	"%c[%d;%df".printf(0x1B,y,x)
}
int floor_pow2(int i){
	if !i => return 0
	int ret=1
	while(i>>=1) ret<<=1
	return ret
}
int utest(char* found,char* expect,char* in="",char* title=""){
	if expect==found => return 0
	expect=expect.to_str()
	found=found.to_str()
	if !expect.str_len() && !found.str_len() => return 0
	if expect===found => return 0
	"
	TEST: $title
	[IN]_______________________
	$in
	[CORRECT]__________________
	$expect
	[WRONG]
	$found
	[DIFF]_____________________
	$(expect.str_quote())
	$(found.str_quote())
	_______________________________________________[ERROR]
	".px()
	return -1
}
char* xlog(char* str){
	FILE* fp=fopen("/tmp/log.txt","a+")
	fprintf(fp,"%s\n",str)
	fclose(fp)
	return str
}
char* hello() => return :Hi
map* command_line(char* in,int argc,char** argv){
	if argc==1 || (argc==2 && argv[1]==="-h") => in.px(); return NULL
	in.str_split("\n").each v,,i
		if v.fox_at(0)=='\t' => continue
		map* toks=v.str_trim().str_split(" ")
		if toks[0]===argv[1]
			if argc!=toks->len+1
				"Invalid number of arguments".px()
				"Usage: fox $v".px()
				return NULL
			map* ret=[argv[1].str_trim("-")]
			for int i=2;i<argc;i++ => ret[]=argv[i]
			return ret
	"Unrecognized argument".px()
	in.px()
	return NULL
}
map* param_test(char* one=:none,char* two=:missing){
	return args_map()
}
int test_add(int a,int b) => return a+b
map* test_map(map* out) => return out

map* load_global(char* file){
	ret=file.file_read().str_map()
	_globals.map_merge(ret)
	return ret
}
int err_msg(char* msg,char** ptr){
	if !ptr => return 0
	*ptr=msg
	return 0
}
char* tutorial(){
	return '-------
	# Fox Language
	Fox language. Transcompiles source into into human readable C.
	Maintaining your original format, comment and indention and line number.
	Builtin Fox & C interpreter. Bootstrapped compiler.

	Source in Fox:
	```
	#include "hello.h"

	main(){
		"
		Total $(args.map_len()) command line arguments
		those are $args
		".px()	

		name=:Habib
		msg="hello, $name!"
		msg.px()

		myvector=[:hello, :world]
		myvector.px()

		mymap={name: :Habib, age: 23}
		mymap.name=:Ibrahim
		mymap.px()

		---
		Drawing a box, $name!
		|---------|
		|         |
		|         |
		|---------|
		---.px()

		return 0
	}

	```
	Generated C code:
	```
	#include "hello.h"

	int main(int argc, char** argv, char** env){ gc_start(); map* args=argv_map(argv, argc);
		px(xstr("", 
		"Total ",int_str( map_len(args)), " command line arguments\n", 
		"those are ", args, 
		"", End),1);	

		char* name="Habib";
		char* msg=xstr("hello, ", name, "!", End);
		px(msg,1);

		map* myvector=xvec("hello", "world", End);
		px(myvector,1);

		map* mymap=xmap("name", "Habib", "age",int_var( 23), End);
		add(mymap,"name","Ibrahim");
		px(mymap,1);

		px(xstr("", 
		"Drawing a box, ", name, "!\n", 
		"|---------|\n", 
		"|         |\n", 
		"|         |\n", 
		"|---------|", 
		"", End),1);

		return 0;
	};
	```
	Run and output
	```
	$ fox cc hello.fox
	-> hello.c
	-> hello.h
	gcc -g -Os hello.c -o hello -std=gnu99 -Wno-logical-op-parentheses -lm -lfox 2>&1

	$ ./hello
	Total 1 command line arguments were passed
	and those are ["./hello"]
	hello, Habib!
	["hello", "world"]
	{"name":"Habib", "age":23}
	{"name":"Ibrahim", "age":23}
	Drawing a box, Habib!
	|---------|
	|         |
	|         |
	|---------|

	$
	```

	## Features

	### Small code base
	1K lines for the runtime. The compiler with interpreter is 4K lines. Creates small 30KB binary for staticaly linked hello world app.

	### GCed
	Mark and sweep tracing GC. 50ms max delay in average use cases.

	### Minimal boiler code
	Primitive types are not boxed. Use C native int, double, float, char* as usual. Variants are void*.
	It isn't until you wish to use vectors and maps when you need structures.
	Vector and map structure
	```
	typedef struct map {
		int len;
		char type;
		union {
			struct Mapcell* pairs;
			void** vars;
		};
	} map;

	typedef struct Mapcell {
		short nextid;
		int hkey;
		char* id;
		void* val;
	} Mapcell;

	```

	### Inline maps and vectors. Inline JSON.
	```
	data={name: Habib, age: 31}
	data.name=:Ibrahim
	days=[sun, mon, tue]
	days[1].px()
	```

	### Reflection
	```
	funcs()
	["hello","Abdul"].call_func(:hello_world)
	```

	### Multiline string
	Three dashes with variable substitution.
	```
	---
	Thee dash multiline comment
	With $variable. 
	Put code like this: $(1+1)
	Or call functions $(name.str_upper())
	---
	```
	Or double quotes. Same as triple dashes.
	```
	"
	Escape dollar sign using double dollars, like $$this.
	"
	```
	Or single quote. No variable substitution.
	```
	'
	Single quote, without variable substitution.
	No $variable substitution will occure.
	'
	```
	You can add string terminators with single and double quote version
	Or extend the tripple dashes with more dashes and a matched closing.
	```
	".end1
	Using an unique string terminator.
	.end1"
	```
	### Function chaining
	```
	"myfile.txt".file_open().parse().print()
	```

	### Default parameters
	```
	int fn(char* p1="hello", p2="world")
	fn(,"hi")
	```

	### Indented blocks
	```
	if a==1
		:hello.px()
	```
	Use => in single line blocks
	```
	if a==1 || b==2 => done=1; return 1
	```
	
	### No semicolons, unless needed
	```
	a=1+1
	a.px()
	```	
	### Inherited types
	```
	i=0
	s=""
	vals={a: b, c: d}
	```

	### Easily call functions from command line
	```
	./fox sub_str hello 3 -1
	```

	### Execute code from CL
	```
	./fox ":todo.table('todo.db').cols.px()"
	```

	### Execute a file from CL
	```
	./fox example/script.fox
	```

	### Compile
	```
	make
	make install
	make tests
	```
	
	### Unit Tests
	```
	cd tests
	fox utests
	```

	### Bind with PHP. Every function prefixed with :fox_
	```
	<?=fox_hello()?>
	```

	### Embeded variables in string
	```
	"name=$val"
	"name=$(val+1)"
	```

	### eval() most of any code
	```
	"(1+2).px()".eval()
	```

	### String operations
	```
	cat .. cat .. cat
	compare === compare
	not !== not
	merge .= string
	```

	## Syntax
	```
	int i=1;
	mp=[];
	
	int i=1
	map* mp=[]
	```
	
	### Function Chaining
	```
	px(json(str_split(str_trim("habib,ayman"),",")));
	"habib,ayman".str_trim().str_split(",").json().px()
	"habib,ayman"
		.str_trim()
		.str_split(",")
		.json()
		.px()
	```

	### Code Blocks
	```
	if(n<2){
		n*=2;
		return n;
	}
	if(n<2)
		n*=2
		return n
	if n<2
		n*=2
		return n
	if n<2 => n*=2; return n
	```

	### Strings
	```
	char* a="hello, world"
	char* a=:hello\,\ world
	char* a="
		hello, world
		"
	char* a=---
		hello, world
		---
	```
	### Maps
	```
	map* mp={}
	map* mp=[]
	```

	### Vectors
	```
	map* mp=[]
	```
	
	### Populate Map
	```
	mp={name: :Sanjir}[:age]=21
	mp={name: :Sanjir,age: 21}
	mp="
		name=Sanjir
		age=#21
		".str_map()
	mp="name=Sanjir,age=#21".str_map()
	```

	### Initialize Vector
	```
	mp=[:Habib,:Anas,:Ayman]
	mp="
		Habib
		Anas
		Ayman
		".str_vec()
	mp="Habib,Anas,Ayman".str_vec()
	```

	### Access by key	
	```
	map_val(map_val(:address,mp),:city)
	mp[:address][:city]
	mp.:address.:city
	mp.address.city
	```

	### Iterate
	```
	for(int i=1;i<=mp->len;i++)
		mp[i-1].px()
	
	mp.each ,,i
		mp[i-1].px()
	
	mp.each v,,i
		v.px()
	```

	```
	mp.each v,,i => => v.px()
	mp.each v,,i => v.px()
	mp.each ,,i => mp[i-1].px()
	mp.each ,k,i => mp[k].px()
	mp.each v ,,i=> v.px()
	mp.each v ,k,i=> v.px()
	```
	
	```
	input.str_split(" ").each v,,i
		v.px()
	```

	### Functions
	```
	int add(int a,int b){
		return a+b;
	}
	int add(int a,int b)
		return a+b
	int add(int a,int b) => return a+b
	```

	### Default Parameters
	```
	int http_out(
		char* body,
		int status=200,
		char* mime="text/html",
		char* template=_globals.default.template
	){
		body.px()
	}
	```

	### Invoke Functions
	```
	int increase(int num,int inc_by=2) => return num * inc_by

	increase(7)
	increase(7,2)
	[7,2].call_func(:increase)
	[7].call_func(:increase)
	[NULL,:increase,:num,7,:inc_by,2].data_exec()
	"
		increase
		num=7
		inc_by=2
		".str_map().data_exec()
	```

	### Eval
	```
	"1+1".eval()==2
	"1 && 2".eval()==2
	"7 || 4".eval()==7
	"info.name".eval("
		info
			name=Habib
		".str_map())
	```


	### Template
	```
	"
		name=Habib
		age=32
	".render("
		Hi #{name}! Your age is #{age}
	")

	"
		name=Habib
		age=32
	".render("
		We know the following information about you!
		--body
		#{_key}: #{_val}
		--foot
		That was all!
	")
	```

	### String Operation	
	```
	str="hello world"
	str=:hello\ world
	str===:hello
	str.is_word("hello helo hilo")
	```

	-------';
}
char* fork_exec(char* cmd,map* params){
	pid_t pid=fork()
	if pid==0
		switch(params.map_len())
			case 0: execlp(cmd,cmd,NULL); break
			case 1: execlp(cmd,cmd,params[0],NULL); break
			case 2: execlp(cmd,cmd,params[0],params[1],NULL); break
			case 3: execlp(cmd,cmd,params[0],params[1],params[2],NULL); break
			case 4: execlp(cmd,cmd,params[0],params[1],params[2],params[3],NULL); break
			case 5: execlp(cmd,cmd,params[0],params[1],params[2],params[3],params[4],NULL); break
			case 6: execlp(cmd,cmd,params[0],params[1],params[2],params[3],params[4],params[5],NULL); break
			default: return "6 max params supported in fork/exec"; break
	else if pid<0 => return "Can't exec $cmd"
	else
		int status=0
		pid_t ws=pid.waitpid(&status,WNOHANG)
		if ws == -1 => return "Exec fox_error while running $cmd"
		else if status.WIFEXITED() => return status.WEXITSTATUS() ? "command $cmd failed" : NULL
		else if status.WIFSIGNALED() => return "command $cmd killed"
	return NULL
}
int fib(int i){
	if i < 2 => return i
	return fib(i-1)+fib(i-2)
}
int msleep(int msecs){
	return usleep(msecs*1000);
}
int str_ascii(char* in) => return in[0]
char* ping(char* str="pong") => return str
