#line 2 "src/html.fox"

#include <core.h>
#include <foxtime.h>
#include <regexp.h>
#include <http.h>
#include <html.h>
#include <tsv.h>
//#include "astrostr.h"

#pragma fox cc -lfoxdeps

extern char*(*page_html)(map* data);
extern map*(*page_data)(map* data);

char*(*page_html)(map* data)=default_page_html;
map*(*page_data)(map* data)=default_page_data;

char* str_show(char* value,char* type,map* op=NULL,int width=0){
	value=value.to_str()
	if !value => return ""
	if !type => return value
	if op.list => return op.list[value] ? op.list[value].str_title() : value
//	if op.sql && op.db => return op.sql.fkey_show(op.db,value)
	type={{
		text text
		para para
		source source
		password password
		html html
		guid guid
		amount number
		mins mins
		debit debit
		credit credit
		bool bool
		email email
		date date
		quarter quarter
		file file
		jpeg image
		duration duration
	}}.map_type(type)
	if width && type.is_word("source text para") && value.str_len()>width*256 => value=value.sub_str(0,width*256)
	if type===:bool => return value.is_int() ? 'Yes' : 'No'
	if type===:text => return value.str_html()
	if type===:file => return value.str_len().int_kb()
	if type===:para => return value.str_html().str_replace("\n","<br>")
	if type===:source => return "<pre>"..value.str_html().."</pre>"
	if type===:html => return value
	if type===:number => return value.int_human(op.unit)
	if type===:debit => return value.int_human(op.unit)
	if type===:credit => return (-value.to_int()).int_human(op.unit)
	if type===:password => return "****"
	if type===:email => return "<a href='mailto:"..value.str_html().."'>"..value.str_html().."</a>"
	if type===:guid => return '<ID>'.str_html()
	if type===:mins => n=value.to_int(); return mstr("%d:%02d",n/60,n%60)
	if type===:duration => return 'Duration/Pending'
	if type===:date => return value.datetime_human()
	if type===:quarter => return 'Pending-Qurter'
	if type===:image => return value ? "<img src=".._globals.base_url.."/"..value.thumb_name().."></img>" : "--"
	return value
}
char* cols_show(map* cols,map* row,char* name,int width=2){
	return row[name].str_show(cols[name].type,cols[name],width)
}
char* datetime_human(char* in){
	if !in => return ''
	char buffer[64]
	time_t time=in.str_time()
	strftime(buffer,buffer.sizeof(), "%a %e-%b-%Y %l:%M %p",localtime(&time))
	return buffer.str_dup()
}
char* thumb_name(char* name){
	parts=name.str_split("/")
	ext=parts.vec_pop()
	parts[]='thumbnail'
	parts[]=ext
	return parts.map_join("/")
}
map* row_show(map* row,map* cols,int width=2){
	ret={}
	row.each v,f
		if cols[f] => ret[f]=cols.cols_show(row,f,width)
		else ret[f]=v
	return ret
}
map* rows_show(map* rows,map* cols,int width=2){
	ret=[]
	rows.each row,k,i
		r={}
		row.each v,f,i2
			if cols[f] => r[f]=cols.cols_show(row,f,width)
			else r[f]=v
		ret[]=r
	return ret
}
extern int _queries;
char* default_page_html(map* data){
	head=---
	<!DOCTYPE html>
	<html><head><meta charset='utf-8'>
	<title>$(data.title)</title>
	<script type="application/ld+json">
	{
		"@context": "http://schema.org",
		"@type": "WebSite",
		"name": "Habib's Site",
		"alternateName": "Sanjir Habib",
		"url": "$(_globals.req.fullpath.full_url())"
	}
	</script>
	<link rel="apple-touch-icon" href="/apple-touch-icon.png">
	<meta name="application-name" content="habib"/>
	<meta name="msapplication-square70x70logo" content="/small.jpg"/>
	<meta name="msapplication-square150x150logo" content="/medium.jpg"/>
	<meta name="msapplication-wide310x150logo" content="/wide.jpg"/>
	<meta name="msapplication-square310x310logo" content="/large.jpg"/>
	<meta name="msapplication-TileColor" content="#fff"/>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	$(data.header)
	<link rel='icon' href='$(data.logo)'></link>
	</head><body>

	---;
	if _globals.req.get._print
		return ---
		$head
		$(data.body)
		</body></html>
		---
	return ---
	$head
	<div class='row-fluid alert-success'><span class='span8' style='padding-left:2em;'>$(data.msg)</span>$(data.login)</div>
	<div class=row-fluid>
	<div class='span3' style='text-align:center;'><a href='$(data.home)'><img style='width:auto;height:100px;padding:.3em;' src='$(data.logo)'></img></a></div>
	<div class='span7'>
	<h2 style='text-align:center;'>$(data.title)</h2>
	<div style='border-top:1px solid gray;border-bottom:1px solid gray;min-height:0.2em;text-align:center;'>$(data.desc)</div>
	</div>
	</div>
	$(data.tabs)$(data.ldmenu)
	<div class=container-fluid>
	<div class=row-fluid>$(data.body)</div>
	<hr noshade=noshade style="width:70%;margin:auto;height:1px;margin-bottom:.5em;margin-top:8em;color:gray;">
	<div class=footer style='color:#333;font-size:small;text-align:center;'>
	&copy; Habib &lt;habib@habibur.com&gt;. $(data.hits) $(data.footer)
	</div>
	</div>
	</body></html>

	---
}
map* default_page_data(map* data){
	data.title||="Habib's Site"
	data.tab||=data.title
	data.logo||="logo.jpg".home_url()
	data.home||=home_url()
	data.css&&="<style>\n$(data.css)</style>\n"
	data.msg||=_globals.sess.msg
	_globals.sess.map_del_key(:msg).map_compact()
	head=''
	['/res/bootstrap.css','/res/bootstrap-responsive.css','/res/jquery.js','/res/bootstrap.js']
	.each v
		if v.sub_str(-4)==='.css' => head.="<link rel='stylesheet' href='$v'></link>\n"
		else head.="<script src='$v'></script>\n"
	_globals.jsfile.each v
		head.="<script src='$v'></script>\n"
	data.header=head..data.css
		..(_globals.css.map_len() and "<style>\n".._globals.css.map_join("\n").."</style>\n")
	data.desc||=data.meta.description
	data.meta.description||=data.desc
	data.meta.description||=data.title
	data.meta["og:description"]=data.meta.description
	data.meta["og:title"]=data.title
	data.meta["og:image"]||=data.logo.full_url()
	data.meta.each val, key
		data.header.="<meta property=\"$key\" content=\"$val\">\n"
	if _globals.req.get._print => return data
	data.footer=---
	Total: $(max_mem().int_kb()). $(mem_usage()) Queries: $(_queries.int_str()).
	---
	data.footer.=(_globals.js.map_len() and "<script>\n".._globals.js.map_join("\n").."</script>")
	tabs=''
	lddata={"@context": "http://schema.org", "@type": "BreadcrumbList"}
	i=1
	_globals.tabs.each name, url, idx
		active=''
		if idx==_globals.tabs.map_len()-1
			active=" class='active'"			
		tabs.="<li$active><a href='$url'>$name</a></li>\n"
			
		lddata.itemListElement[]={
			"@type": "ListItem",
			"position": i++, "item": { "@id": url, "name": name }
		}
	if _globals.tabs.map_len()>1
		data.tabs="<div><ul class='nav nav-tabs'>$tabs</ul></div>"
	data.ldmenu="<script type='application/ld+json'>$lddata</script>"
	body=''
	_globals.css[]=---
	a.menu {overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}
	ul.menu2 {margin-top:5em;}
	---;
	data.menu.each name, url
		if url.str_start("onclick:")
			body.="<li><a class='menu' href='#' onclick='$(url.sub_str(8))'>$name</a></li>\n"
		else
			body.="<li><a class='menu' href='$url'>$name</a></li>\n"
	if data.menus
		data.menus.each menu, title
			if !menu.map_len() => continue
			body.="</ul><h5 style='text-align:center;'>$title</h5><ul class='nav nav-tabs nav-stacked menu2'>"
			menu.each name, url
				body.="<li><a class='menu' href='$url'>$name</a></li>\n"
	if data.width.is_int()==4
		body="<div class='span11 offset1'><ul class='nav nav-pills'>$body</ul></div>"
	else
		body="<div class=span2><ul class='nav nav-tabs nav-stacked'>$body</ul></div>"

	switch data.width.is_int()
		case 1:
			body.="<div class='span4'>$(data.body)</div><div class=span6>$(data.help)</div>"
		break
		case 3:
			body.="<div class='span10'>$(data.help)$(data.body)</div>"
		break
		case 4:
			body.="</div><div class=row-fluid>$(data.help)$(data.body)</div>"
		break
		default: //=2
			body.="<div class='span7'>$(data.body)</div><div class=span3>$(data.help)</div>"
	data.body=body
	login=''
	if _globals.sess.user
		login="<span class='pull-right'>$(_globals.sess.user) as $(_globals.sess.role) | <a href='$(base_url())logout/'>Logout</a> &nbsp; </span>"
	else
		login="<span class='pull-right' style='margin-right:3em;'><a href='$(base_url())login/'>Login</a> | <a href='$(base_url())register/'>Register</a></span>"
	data.login=login
	return data
}
char* not_found(char* path=NULL) => return "The requested content $(path or _globals.req.fullpath) was not found on the server.".http_out("404 Not Found")
char* show_page(map* data) => return data.page_data().page_html().http_out()
int is_post() => return _globals.req.method===:post
map* post_data_multipart(){
	if _globals.post => return _globals.post
	map* mime=env_vars().CONTENT_TYPE.header_map()
	if mime[0]!=="multipart/form-data"
		return _globals.req.post.amps_map()
	ret={}
	char* seperator=mime.boundary
	_globals.req.post.str_split(seperator).each v,,i
		map* mp3=v.str_split("\r\n\r\n",2)
		if mp3.map_len()!=2 => continue
		mp3[0].str_split("\r\n").each v2,k2,i2
			header=v2.header_map()
			if header.name
				ret[header.name].filename=header.filename
				ret[header.name].data=mp3[1].sub_str(0,-4)
				break
	_globals.post=ret
	_globals.req.post=NULL
	return ret
}
char* name_tab(char* name){
	_globals.tabs[_globals.paths.matched.home_url()]=name
	return name
}
map* get(char* path, map* names=NULL){
	ret=_globals.req.path.regexp("^"..path)
	if !ret => return NULL
	ret2=_globals.paths
	if !ret2 => _globals.paths={}; ret2=_globals.paths
	if names
		for i=1; i<ret.map_len() && i<=names.map_len(); i++
			ret2[names.map_id(i-1)]=ret[i]
	ret2.matched=ret[0]
	ret2.end=_globals.req.path.regexp("^"..path.."$") ? "yes" : NULL
	return ret2
}
char* show_body(char* body,map* page){
	page.body=body
	return page.show_page()
}
int days_in_feb(int year){
	if !(year%400) => return 29
	if !(year%100) => return 28
	if !(year%4) => return 29
	return 28
}
int days_in_month(int month,int year){
	if month==4||month==6||month==9||month==11 => return 30
	if month==2 => return days_in_feb(year, month)
	return 31
}
char* add_tab(char* path=NULL,char* name=NULL){
	if path && path[path.str_len()-1]!='/' => path.="/"
	path = path ? path.home_url() : _globals.paths.matched.home_url()
	if !name
		if !path || path==="/" => name=:Home
		else
			i=path.str_len()-1
			while(i && path[--i]!='/'){}
			name=path.sub_str(i+1,-1).str_title()
	_globals.tabs[path]=name
	return name
}
char* tz_dst(char* tz=NULL, char* date=NULL){
	time_t ret=date.str_time()
	if tz => setenv(:TZ, tz, 1);
	struct tm* tm=localtime(&ret)
	return tm->tm_isdst==1 ? :DST : ''
}
double tz_offset(char* tz=NULL, char* date=NULL){
//in hours
	time_t ret=date.str_time()
	struct tm tm={0}
	gmtime_r(&ret,&tm)
	if tz => setenv(:TZ, tz, 1)
	struct tm tml={0}
	localtime_r(&ret,&tml)
	tm.tm_isdst = tml.tm_isdst
	time_t gm=mktime(&tm)
	return (ret-gm)/3600.0
}
char* tz_utc(char* tz, char* date=NULL) => return tz.tz_offset(date).offset_utc()
char* offset_utc(double off){
	if !off => return :UTC
	sign=off<0 ? '-' : '+'
	off=fabs(off)
	if off-floor(off)<1/100. => return mstr("UTC%c%d",sign,(int)off)
	return mstr("UTC%c%d:%02d",sign,(int)off,(int)((off-(int)off)*60+0.5))
}
char* date_ymd(char* in,int* year, int* month,int* day){
	*year=*month=*day=0
	if !in => return NULL
	sscanf(in,"%04d-%02d-%02d",year,month,day)
	return in
}
char* date_human(char* in){
	year=0
	month=0
	day=0
	in.date_ymd(year,month,day)
	return day.."-"..month.month_en3().."-"..year
}
char* tz_human(double tz){
	if !tz => return :UTC
	mins=(int)(frac(tz)*60)
	if !mins => return mstr("UTC%c%d", tz<0 ? '-' : '+', abs((int)(tz)), mins)
	return mstr("UTC%c%d:%d", tz<0 ? '-' : '+', (int)(tz), mins)
}
map* tz_data(char* name,char* date=NULL){
	return {{
		name =name
		offset =name.tz_offset(date)
		dst =name.tz_dst(date)
		utc =name.tz_utc(date)
	}}
}
char* form_html(map* mp){
	mp.vals.each val,key
		if mp.cols[key] => mp.cols[key].value=val
	ret=---
	<fieldset><legend>$(mp.title)</legend>
	<p class='text-$(mp.error ? :error : :info)'>$(mp.msg)</p>
	<form method=$(mp.method or :post)>
	---
	mp.cols.each val, name
		ret.=---
		<div class="control-group">
		<label>$(val.label or val.name.str_title())</label>$(val.ctrl_html())
		<span class='help-block'>$(mp.error[name])</span>
		</div>
		---
	ret.="<div class='form-actions'><div class='btn-group'>"
	mp.buttons.each val, name, idx
		ret.=---
		<input class='btn$(!idx ? " btn-primary" : "")' type='submit' name='$(val.name)' value='$(val.name.str_title())'>
		---
	ret.="</div></div>"
	ret.="</form>"
	return ret
}
map* param_map(char* in){
	ret={}
	in.str_split("&").each val
		two=val.str_split("=",2)
		ret[two[0]]=two[1]
	return ret
}
map* post_data() => return _globals.req.post.amps_map()
map* form_posted(map* form){
	save_caller()
	if _globals.req.method!==:post => return NULL
	param=post_data()
	form.buttons.each ,key
		if param[key]
			form.cols.each val,key
				val.value=param[key]
			return param
	return NULL
}
char* ctrl_html(map* ctrl){
	id=ctrl.id or ctrl.name.name_id()
	if ctrl.list
		ret="<option value=''>--</option>"
		ctrl.list.each val, key
			ret.="<option value='$(key.h())'$(ctrl.value===key ? ' selected' :'')>$(val ? val.h() : key.str_title().h())</option>"
		return "<select name='$(ctrl.name)' id='$id' class='input-medium'>$ret</select>"
	type={{
		text text
		code code
		para para
		source source
		password password
		hidden hidden
	}}.map_type(ctrl.type)
	if type===:code
		return ---
		<input type=text name=$(ctrl.name) value="$(ctrl.value)" id=$id size="input-$(ctrl.size or :medium)"></input>
		---
	if type===:text
		return ---
		<input type=text name=$(ctrl.name) value="$(ctrl.value)" id=$id size="input-$(ctrl.size or :large)"></input>
		---
	if type===:para
		return ---
		<textarea class="para" style="width:20em; height:10em;" id=$id name='$(ctrl.name)'>$(ctrl.value)</textarea>
		---
	if type===:hidden
		return ---
		<input type=hidden name=$(ctrl.name) value="$(ctrl.value)" id=$id></input>
		---
		
	if type===:source
		static int codeincluded=0
		if !codeincluded
			_globals.jsfile[]='/res/jquery.textarea.js'
			_globals.css[]=".source {font-family:courier;overflow:auto;width:100%;height:30em;}"
			_globals.js[]="$$(\"#$id\").tabby()"
			codeincluded=1
		return ---
		<textarea id=$id class='source' wrap='soft' name='$(ctrl.name)'>$(ctrl.value)</textarea>
		---
	if type===:password
		return ---
		<input type=password name=$(ctrl.name) value="$(ctrl.value)" id=$id></input>
		---
	return "control type $(ctrl.type) unspported. please provide support in ctrl_html()"
}
char* name_id(char* name){
	return name
}
map* form_gets(map* form){
	_globals.req.get.vals.each val,key
		if form.cols[key] => form.cols[key].value=val
	return form
}
char* show_form(map* data){
	data.body=data.form_html()
	return data.show_page()
}
int is_user(char* who) => return !who.str_len() || _globals.sess.user===who || _globals.sess.role===who
char* authorized(char* who){
	if !who.is_user() => return _globals.req.path.not_found()
	return NULL
}
char* str_bare(char* in,char* accept=NULL){
	if !in => return in
	ret=in
	while *in
		if *in>0 && !(*in).is_alphanum(accept) => *in=' '
		in+=in.utf_len()
	return ret
}
char* word_end(char* in,int len){
	if in.str_len()<=len => return in
	ptr=in+len
	while *ptr && !" \t\n\r".str_chr(*ptr) => ptr++
	if !*ptr => return in
	return in.sub_str(0,ptr-in)
}
char* confirm(char* msg="Confirm?"){
	form={{
		title =msg
		buttons
			yes -
			cancel -
	}}
	data=form.form_posted()
	if data.yes
		return "yes"
	if data => return NULL
	return form.show_form()
}
char* html_text(char* in){
	len=0
	head=in
	while *in
		if *in=='<'
			if in.str_starti("<script")
				while *in && !in.str_starti("</script") => in++
			if in.str_starti("<style")
				while *in && !in.str_starti("</style") => in++
			while *in && *in!='>' => in++
			if *in=='>' => in++
			continue
		in++
		len++	
	if len==in.str_len() => return in
	ret=len.new_str()
	len=0
	in=head
	while *in
		if *in=='<'
			if in.str_starti("<script")
				while *in && !in.str_starti("</script") => in++
			if in.str_starti("<style")
				while *in && !in.str_starti("</style") => in++
			while *in && *in!='>' => in++
			if *in=='>' => in++
			continue
		ret[len++]="\n\r".strchr(*in) ? ' ' : *in
		in++
	return ret
}
char* url_filename(char* url){
	question=url.rchar_at("?")
	if question>=0 => url=url.sub_str(0,question)
	slash=url.rchar_at("/")
	if slash<0 => return url
	return url.sub_str(slash+1)
}
int init_html(char* name){
	{{
		title =name.str_title()
		body =name
		tabs
			../ Home
	}}.page_data().page_html().write_file(name..".html")
	return 0
}
map* str_list(char* in){
	if !in => return NULL
	if !in.is_str() => return (map*)in
	toks=in.str_tokenize(" ,\n\r\t=:")
	name=''
	val=''
	ret={}
	toks.each tok,,i
		int isword=!" ,\n\r\t=:".str_chr(tok.is_str()[0])
		if !isword
			if name && tok.str_chr(',')
				ret[name]=name.str_title()
				name=NULL
			continue
		if !name
			name=tok
			continue
		ret[name]=tok
		name=NULL
	if name
		ret[name]=name.str_title()
	return ret
}
map* row_cols(map* row){
	ret={}
	row.each v,n
		ret[n]={{
			type =data_type(n,v)
			title =str_title(n)
			name =n
		}}
	return ret
}
map* rows_cols(map* rows) => return rows ? rows[0].row_cols() : []
char* val_format(char* val,char* type,map* op=NULL){
	if op.list
		list=op.list.sub_str(1,-1).str_list()
		return list[val] or val
//	else if type===:currency
//		return val.taka()
	else if type===:html
		return val
	else if type===:action
		return val
//	else if type===:daysec
//		return val.hm12()
	else if type===:password
		return val.str_len() ? "****" : ''
	else if type===:para
		return val.str_replace("\n","<br/>")
	else if type===:date
		return val.date_human()
//	else if type===:month
//		return val.month_human()
//	else if type===:int
//		return val ? val.number_format() : ''
	else if type===:percent
		return val ? val.."%" : ''
	else if type===:flat
		return val && val.is_numeric() ? "F-$val" : val
//	else if type===:balance
//		return val.balance();
	else if type===:phone
		return val.sub_str(0,-6).."-"..val.sub_str(-6)
	else if type===:gb
		return ((int)((val.to_int()/1000000.0+0.5).floor())).int_str().." GB"
	return val.html()
}
char* rows_sum(map* rows, map* cols){
	sum={}
	cols.each col,n
		if col.sum => sum[n]=0	
	if !sum.map_len() => return ''
	rows.each row
		row.each val,col
			sum[col]=sum[col]+row[col].str_int()
	ret="<tr class='total'>"
	blanks=0
	cols.each col,n
		if sum[n] => break
		blanks++
	if blanks => ret.="<td colspan=$blanks class=total>Total</td>"
	cols.each ,col,n
		if n<blanks => continue
		if !sum[col] => ret.="<td class=$(cols[col].type)>&nbsp;</td>"
		else ret.="<td class='total $(cols[col].type)'>$(sum[col].val_format(cols[col].type))</td>"
	ret.="</tr>"
//	if(@$sum['debit']!=@$sum['credit']){
//		$ret.="<tr>";
//		if($blanks) $ret.="<td colspan=$blanks class=balance>Balance</td>";
//		foreach(array_keys($cols) as $n=>$col){
//			if($n<$blanks) continue;
//			if($col!='debit' && $col!='credit') $ret.="<td>&nbsp;</td>";
//			else if($sum['debit']>$sum['credit']){
//				if($col=='debit')
//					$ret.="<td class='currency'>".taka($sum['debit']-$sum['credit'])."</td>";
//				else 
//					$ret.="<td>Debit</td>";
//			}
//			else{
//				if($col=='credit')
//					$ret.="<td class='currency'>".taka($sum['credit']-$sum['debit'])."</td>";
//				else 
//					$ret.="<td>Credit</td>";
//			}
//		}
//	}
	return ret
}
char* table_close(char* in,char* tags="class='data'"){
	tags&&=" $tags"
	return "<table$tags>$in</table>"
}
char* html(char* in){
	return in.str_tr({ "<" : "&gt;", ">" : "&lt;", "&" : "&amp;" })
}
//char* taka(char* val){
//	$val=trim($val);
//	if(!$val) return '';
//	$neg='';
//	if($val[0]=='-'){
//		$neg='-';
//		$val=substr($val,1);
//	}
//	$deci='';
//	$val=explode('.',$val);
//	if(count($val)==2){
//		$deci='.'.$val[1];
//		$val=$val[0];
//	}
//	else $val=$val[0];
//	if(strlen($val)>7) $val=substr($val,0,-7).",".substr($val,-7,-5).",".substr($val,-5,-3).",".substr($val,-3);
//	else if(strlen($val)>5) $val=substr($val,-7,-5).",".substr($val,-5,-3).",".substr($val,-3);
//	else if(strlen($val)>3) $val=substr($val,-5,-3).",".substr($val,-3);
//	return "Tk. ".$neg.$val.$deci;
//}
char* rows_list(map* rows, void* cols=NULL, void* callback=NULL){
	map* rows_fmt=NULL
	if cols.is_str() => cols=cols.str_cols()
	if callback
		rows_fmt=[]
		rows.each row,,i
			map* ret=((map*(*)(map*,int))(callback))(row,i)
			if ret
				rows_fmt[i]=ret
	else
		rows_fmt=rows
	cols||=rows_fmt.rows_cols
	// col definition can have link=<name of another col that contains link>
	cols.each op, col
		if op.link
			rows_fmt.each row
				row[col]="<a href='$(row[op.link])'>$(row[col])</a>"

	blank=''
	if !rows.map_len()
		blank="<tr><td style='height:3em;vertical-align:center;text-align:center;' colspan=$(cols.map_len())>Blank</td></tr>"
	ret=''
	ret.=---
	<tr>$(cols.cols_th())</tr>
	<tr>$(rows_fmt.rows_td(cols).map_join("</tr><tr>"))</tr>
	$blank
	$(rows_fmt.rows_sum(cols))

	---;
	return ret
}
char* cols_th(map* cols){
	ret=''
	found=0
	cols.each col
		if col.title.str_len() => found++
		ret.="<th class='$(col.type)'>$(col.title)</th>"
	return found ? ret : ''
}
char* row_td(void* row,map* cols){
	if !row.is_map() => return row
	ret=''
	cols.each col,n
		cls=col.class
		cls&&=" "..cls
		style=''
		if col.style
			style=" style='$(col.style)'"
		ret.="<td class='$(col.type)$cls'$style>$(row[n].val_format(col.type,col))</td>"
	return ret
}
map* rows_td(map* rows, map* cols){
	ret=[]
	rows.each r
		ret[]=r.row_td(cols)
	return ret
}
